package es.elv.kobold

import org.nwnx.nwnx2.jvm._

private[kobold] trait NWScriptProxyGen {
  protected def wrap[R](method: String)(c: => R): R

  def actionAttack(oAttackee: NWObject, bPassive: Boolean) = wrap("actionAttack") { NWScript.actionAttack(oAttackee, bPassive) }
  def actionCastFakeSpellAtLocation(nSpell: Int, lTarget: NWLocation, nProjectilePathType: Int) = wrap("actionCastFakeSpellAtLocation") { NWScript.actionCastFakeSpellAtLocation(nSpell, lTarget, nProjectilePathType) }
  def actionCastFakeSpellAtObject(nSpell: Int, oTarget: NWObject, nProjectilePathType: Int) = wrap("actionCastFakeSpellAtObject") { NWScript.actionCastFakeSpellAtObject(nSpell, oTarget, nProjectilePathType) }
  def actionCastSpellAtLocation(nSpell: Int, lTargetLocation: NWLocation, nMetaMagic: Int, bCheat: Boolean, nProjectilePathType: Int, bInstantSpell: Boolean) = wrap("actionCastSpellAtLocation") { NWScript.actionCastSpellAtLocation(nSpell, lTargetLocation, nMetaMagic, bCheat, nProjectilePathType, bInstantSpell) }
  def actionCastSpellAtObject(nSpell: Int, oTarget: NWObject, nMetaMagic: Int, bCheat: Boolean, nDomainLevel: Int, nProjectilePathType: Int, bInstantSpell: Boolean) = wrap("actionCastSpellAtObject") { NWScript.actionCastSpellAtObject(nSpell, oTarget, nMetaMagic, bCheat, nDomainLevel, nProjectilePathType, bInstantSpell) }
  def actionCloseDoor(oDoor: NWObject) = wrap("actionCloseDoor") { NWScript.actionCloseDoor(oDoor) }
  def actionCounterSpell(oCounterSpellTarget: NWObject) = wrap("actionCounterSpell") { NWScript.actionCounterSpell(oCounterSpellTarget) }
  def actionEquipItem(oItem: NWObject, nInventorySlot: Int) = wrap("actionEquipItem") { NWScript.actionEquipItem(oItem, nInventorySlot) }
  def actionEquipMostDamagingMelee(oVersus: NWObject, bOffHand: Boolean) = wrap("actionEquipMostDamagingMelee") { NWScript.actionEquipMostDamagingMelee(oVersus, bOffHand) }
  def actionEquipMostDamagingRanged(oVersus: NWObject) = wrap("actionEquipMostDamagingRanged") { NWScript.actionEquipMostDamagingRanged(oVersus) }
  def actionEquipMostEffectiveArmor = wrap("actionEquipMostEffectiveArmor") { NWScript.actionEquipMostEffectiveArmor }
  def actionExamine(oExamine: NWObject) = wrap("actionExamine") { NWScript.actionExamine(oExamine) }
  def actionForceFollowObject(oFollow: NWObject, fFollowDistance: Float) = wrap("actionForceFollowObject") { NWScript.actionForceFollowObject(oFollow, fFollowDistance) }
  def actionForceMoveToLocation(lDestination: NWLocation, bRun: Boolean, fTimeout: Float) = wrap("actionForceMoveToLocation") { NWScript.actionForceMoveToLocation(lDestination, bRun, fTimeout) }
  def actionForceMoveToObject(oMoveTo: NWObject, bRun: Boolean, fRange: Float, fTimeout: Float) = wrap("actionForceMoveToObject") { NWScript.actionForceMoveToObject(oMoveTo, bRun, fRange, fTimeout) }
  def actionGiveItem(oItem: NWObject, oGiveTo: NWObject) = wrap("actionGiveItem") { NWScript.actionGiveItem(oItem, oGiveTo) }
  def actionInteractObject(oPlaceable: NWObject) = wrap("actionInteractObject") { NWScript.actionInteractObject(oPlaceable) }
  def actionJumpToLocation(lLocation: NWLocation) = wrap("actionJumpToLocation") { NWScript.actionJumpToLocation(lLocation) }
  def actionJumpToObject(oToJumpTo: NWObject, bWalkStraightLineToPoint: Boolean) = wrap("actionJumpToObject") { NWScript.actionJumpToObject(oToJumpTo, bWalkStraightLineToPoint) }
  def actionLockObject(oTarget: NWObject) = wrap("actionLockObject") { NWScript.actionLockObject(oTarget) }
  def actionMoveAwayFromLocation(lMoveAwayFrom: NWLocation, bRun: Boolean, fMoveAwayRange: Float) = wrap("actionMoveAwayFromLocation") { NWScript.actionMoveAwayFromLocation(lMoveAwayFrom, bRun, fMoveAwayRange) }
  def actionMoveAwayFromObject(oFleeFrom: NWObject, bRun: Boolean, fMoveAwayRange: Float) = wrap("actionMoveAwayFromObject") { NWScript.actionMoveAwayFromObject(oFleeFrom, bRun, fMoveAwayRange) }
  def actionMoveToLocation(lDestination: NWLocation, bRun: Boolean) = wrap("actionMoveToLocation") { NWScript.actionMoveToLocation(lDestination, bRun) }
  def actionMoveToObject(oMoveTo: NWObject, bRun: Boolean, fRange: Float) = wrap("actionMoveToObject") { NWScript.actionMoveToObject(oMoveTo, bRun, fRange) }
  def actionOpenDoor(oDoor: NWObject) = wrap("actionOpenDoor") { NWScript.actionOpenDoor(oDoor) }
  def actionPauseConversation = wrap("actionPauseConversation") { NWScript.actionPauseConversation }
  def actionPickUpItem(oItem: NWObject) = wrap("actionPickUpItem") { NWScript.actionPickUpItem(oItem) }
  def actionPlayAnimation(nAnimation: Int, fSpeed: Float, fDurationSeconds: Float) = wrap("actionPlayAnimation") { NWScript.actionPlayAnimation(nAnimation, fSpeed, fDurationSeconds) }
  def actionPutDownItem(oItem: NWObject) = wrap("actionPutDownItem") { NWScript.actionPutDownItem(oItem) }
  def actionRandomWalk = wrap("actionRandomWalk") { NWScript.actionRandomWalk }
  def actionRest(bCreatureToEnemyLineOfSightCheck: Boolean) = wrap("actionRest") { NWScript.actionRest(bCreatureToEnemyLineOfSightCheck) }
  def actionResumeConversation = wrap("actionResumeConversation") { NWScript.actionResumeConversation }
  def actionSit(oChair: NWObject) = wrap("actionSit") { NWScript.actionSit(oChair) }
  def actionSpeakString(sStringToSpeak: String, nTalkVolume: Int) = wrap("actionSpeakString") { NWScript.actionSpeakString(sStringToSpeak, nTalkVolume) }
  def actionSpeakStringByStrRef(nStrRef: Int, nTalkVolume: Int) = wrap("actionSpeakStringByStrRef") { NWScript.actionSpeakStringByStrRef(nStrRef, nTalkVolume) }
  def actionStartConversation(oObjectToConverseWith: NWObject, sDialogResRef: String, bPrivateConversation: Boolean, bPlayHello: Boolean) = wrap("actionStartConversation") { NWScript.actionStartConversation(oObjectToConverseWith, sDialogResRef, bPrivateConversation, bPlayHello) }
  def actionTakeItem(oItem: NWObject, oTakeFrom: NWObject) = wrap("actionTakeItem") { NWScript.actionTakeItem(oItem, oTakeFrom) }
  def actionUnequipItem(oItem: NWObject) = wrap("actionUnequipItem") { NWScript.actionUnequipItem(oItem) }
  def actionUnlockObject(oTarget: NWObject) = wrap("actionUnlockObject") { NWScript.actionUnlockObject(oTarget) }
  def actionUseFeat(nFeat: Int, oTarget: NWObject) = wrap("actionUseFeat") { NWScript.actionUseFeat(nFeat, oTarget) }
  def actionUseSkill(nSkill: Int, oTarget: NWObject, nSubSkill: Int, oItemUsed: NWObject) = wrap("actionUseSkill") { NWScript.actionUseSkill(nSkill, oTarget, nSubSkill, oItemUsed) }
  def actionWait(fSeconds: Float) = wrap("actionWait") { NWScript.actionWait(fSeconds) }
  def activatePortal(oTarget: NWObject, sIPaddress: String, sPassword: String, sWaypointTag: String, bSeemless: Boolean) = wrap("activatePortal") { NWScript.activatePortal(oTarget, sIPaddress, sPassword, sWaypointTag, bSeemless) }
  def addHenchman(oMaster: NWObject, oHenchman: NWObject) = wrap("addHenchman") { NWScript.addHenchman(oMaster, oHenchman) }
  def addItemProperty(nDurationType: Int, ipProperty: NWItemProperty, oItem: NWObject, fDuration: Float) = wrap("addItemProperty") { NWScript.addItemProperty(nDurationType, ipProperty, oItem, fDuration) }
  def addJournalQuestEntry(szPlotID: String, nState: Int, oCreature: NWObject, bAllPartyMembers: Boolean, bAllPlayers: Boolean, bAllowOverrideHigher: Boolean) = wrap("addJournalQuestEntry") { NWScript.addJournalQuestEntry(szPlotID, nState, oCreature, bAllPartyMembers, bAllPlayers, bAllowOverrideHigher) }
  def addToParty(oPC: NWObject, oPartyLeader: NWObject) = wrap("addToParty") { NWScript.addToParty(oPC, oPartyLeader) }
  def adjustAlignment(oSubject: NWObject, nAlignment: Int, nShift: Int, bAllPartyMembers: Boolean) = wrap("adjustAlignment") { NWScript.adjustAlignment(oSubject, nAlignment, nShift, bAllPartyMembers) }
  def adjustReputation(oTarget: NWObject, oSourceFactionMember: NWObject, nAdjustment: Int) = wrap("adjustReputation") { NWScript.adjustReputation(oTarget, oSourceFactionMember, nAdjustment) }
  def ambientSoundChangeDay(oArea: NWObject, nTrack: Int) = wrap("ambientSoundChangeDay") { NWScript.ambientSoundChangeDay(oArea, nTrack) }
  def ambientSoundChangeNight(oArea: NWObject, nTrack: Int) = wrap("ambientSoundChangeNight") { NWScript.ambientSoundChangeNight(oArea, nTrack) }
  def ambientSoundPlay(oArea: NWObject) = wrap("ambientSoundPlay") { NWScript.ambientSoundPlay(oArea) }
  def ambientSoundSetDayVolume(oArea: NWObject, nVolume: Int) = wrap("ambientSoundSetDayVolume") { NWScript.ambientSoundSetDayVolume(oArea, nVolume) }
  def ambientSoundSetNightVolume(oArea: NWObject, nVolume: Int) = wrap("ambientSoundSetNightVolume") { NWScript.ambientSoundSetNightVolume(oArea, nVolume) }
  def ambientSoundStop(oArea: NWObject) = wrap("ambientSoundStop") { NWScript.ambientSoundStop(oArea) }
  def angleToVector(fAngle: Float) = wrap("angleToVector") { NWScript.angleToVector(fAngle) }
  def applyEffectAtLocation(nDurationType: Int, eEffect: NWEffect, lLocation: NWLocation, fDuration: Float) = wrap("applyEffectAtLocation") { NWScript.applyEffectAtLocation(nDurationType, eEffect, lLocation, fDuration) }
  def applyEffectToObject(nDurationType: Int, eEffect: NWEffect, oTarget: NWObject, fDuration: Float) = wrap("applyEffectToObject") { NWScript.applyEffectToObject(nDurationType, eEffect, oTarget, fDuration) }
  def beginConversation(sResRef: String, oObjectToDialog: NWObject) = wrap("beginConversation") { NWScript.beginConversation(sResRef, oObjectToDialog) }
  def blackScreen(oCreature: NWObject) = wrap("blackScreen") { NWScript.blackScreen(oCreature) }
  def bootPC(oPlayer: NWObject) = wrap("bootPC") { NWScript.bootPC(oPlayer) }
  def changeFaction(oObjectToChangeFaction: NWObject, oMemberOfFactionToJoin: NWObject) = wrap("changeFaction") { NWScript.changeFaction(oObjectToChangeFaction, oMemberOfFactionToJoin) }
  def changeToStandardFaction(oCreatureToChange: NWObject, nStandardFaction: Int) = wrap("changeToStandardFaction") { NWScript.changeToStandardFaction(oCreatureToChange, nStandardFaction) }
  def clearAllActions(bClearCombatState: Boolean) = wrap("clearAllActions") { NWScript.clearAllActions(bClearCombatState) }
  def clearPersonalReputation(oTarget: NWObject, oSource: NWObject) = wrap("clearPersonalReputation") { NWScript.clearPersonalReputation(oTarget, oSource) }
  def copyItem(oItem: NWObject, oTargetInventory: NWObject, bCopyVars: Boolean) = wrap("copyItem") { NWScript.copyItem(oItem, oTargetInventory, bCopyVars) }
  def copyItemAndModify(oItem: NWObject, nType: Int, nIndex: Int, nNewValue: Int, bCopyVars: Boolean) = wrap("copyItemAndModify") { NWScript.copyItemAndModify(oItem, nType, nIndex, nNewValue, bCopyVars) }
  def copyObject(oSource: NWObject, locLocation: NWLocation, oOwner: NWObject, sNewTag: String) = wrap("copyObject") { NWScript.copyObject(oSource, locLocation, oOwner, sNewTag) }
  def createItemOnObject(sItemTemplate: String, oTarget: NWObject, nStackSize: Int, sNewTag: String) = wrap("createItemOnObject") { NWScript.createItemOnObject(sItemTemplate, oTarget, nStackSize, sNewTag) }
  def createObject(nObjectType: Int, sTemplate: String, lLocation: NWLocation, bUseAppearAnimation: Boolean, sNewTag: String) = wrap("createObject") { NWScript.createObject(nObjectType, sTemplate, lLocation, bUseAppearAnimation, sNewTag) }
  def createTrapAtLocation(nTrapType: Int, lLocation: NWLocation, fSize: Float, sTag: String, nStandardFaction: Int, sOnDisarmScript: String, sOnTrapTriggeredScript: String) = wrap("createTrapAtLocation") { NWScript.createTrapAtLocation(nTrapType, lLocation, fSize, sTag, nStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript) }
  def createTrapOnObject(nTrapType: Int, oObject: NWObject, nStandardFaction: Int, sOnDisarmScript: String, sOnTrapTriggeredScript: String) = wrap("createTrapOnObject") { NWScript.createTrapOnObject(nTrapType, oObject, nStandardFaction, sOnDisarmScript, sOnTrapTriggeredScript) }
  def dayToNight(oPlayer: NWObject, fTransitionTime: Float) = wrap("dayToNight") { NWScript.dayToNight(oPlayer, fTransitionTime) }
  def decrementRemainingFeatUses(oCreature: NWObject, nFeat: Int) = wrap("decrementRemainingFeatUses") { NWScript.decrementRemainingFeatUses(oCreature, nFeat) }
  def decrementRemainingSpellUses(oCreature: NWObject, nSpell: Int) = wrap("decrementRemainingSpellUses") { NWScript.decrementRemainingSpellUses(oCreature, nSpell) }
  def deleteCampaignVariable(sCampaignName: String, sVarName: String, oPlayer: NWObject) = wrap("deleteCampaignVariable") { NWScript.deleteCampaignVariable(sCampaignName, sVarName, oPlayer) }
  def deleteLocalFloat(oObject: NWObject, sVarName: String) = wrap("deleteLocalFloat") { NWScript.deleteLocalFloat(oObject, sVarName) }
  def deleteLocalInt(oObject: NWObject, sVarName: String) = wrap("deleteLocalInt") { NWScript.deleteLocalInt(oObject, sVarName) }
  def deleteLocalLocation(oObject: NWObject, sVarName: String) = wrap("deleteLocalLocation") { NWScript.deleteLocalLocation(oObject, sVarName) }
  def deleteLocalObject(oObject: NWObject, sVarName: String) = wrap("deleteLocalObject") { NWScript.deleteLocalObject(oObject, sVarName) }
  def deleteLocalString(oObject: NWObject, sVarName: String) = wrap("deleteLocalString") { NWScript.deleteLocalString(oObject, sVarName) }
  def destroyCampaignDatabase(sCampaignName: String) = wrap("destroyCampaignDatabase") { NWScript.destroyCampaignDatabase(sCampaignName) }
  def destroyObject(oDestroy: NWObject, fDelay: Float) = wrap("destroyObject") { NWScript.destroyObject(oDestroy, fDelay) }
  def doDoorAction(oTargetDoor: NWObject, nDoorAction: Int) = wrap("doDoorAction") { NWScript.doDoorAction(oTargetDoor, nDoorAction) }
  def doPlaceableObjectAction(oPlaceable: NWObject, nPlaceableAction: Int) = wrap("doPlaceableObjectAction") { NWScript.doPlaceableObjectAction(oPlaceable, nPlaceableAction) }
  def doSinglePlayerAutoSave = wrap("doSinglePlayerAutoSave") { NWScript.doSinglePlayerAutoSave }
  def doWhirlwindAttack(bDisplayFeedback: Boolean, bImproved: Boolean) = wrap("doWhirlwindAttack") { NWScript.doWhirlwindAttack(bDisplayFeedback, bImproved) }
  def effectACDecrease(nValue: Int, nACModifyType: Int, nDamageType: Int) = wrap("effectACDecrease") { NWScript.effectACDecrease(nValue, nACModifyType, nDamageType) }
  def effectACIncrease(nValue: Int, nACModifyType: Int, nDamageType: Int) = wrap("effectACIncrease") { NWScript.effectACIncrease(nValue, nACModifyType, nDamageType) }
  def effectAbilityDecrease(nAbility: Int, nModifyBy: Int) = wrap("effectAbilityDecrease") { NWScript.effectAbilityDecrease(nAbility, nModifyBy) }
  def effectAbilityIncrease(nAbility: Int, nModifyBy: Int) = wrap("effectAbilityIncrease") { NWScript.effectAbilityIncrease(nAbility, nModifyBy) }
  def effectAppear(nAnimation: Int) = wrap("effectAppear") { NWScript.effectAppear(nAnimation) }
  def effectAreaOfEffect(nAreaEffectId: Int, sOnEnterScript: String, sHeartbeatScript: String, sOnExitScript: String) = wrap("effectAreaOfEffect") { NWScript.effectAreaOfEffect(nAreaEffectId, sOnEnterScript, sHeartbeatScript, sOnExitScript) }
  def effectAttackDecrease(nPenalty: Int, nAttackBonus: Int) = wrap("effectAttackDecrease") { NWScript.effectAttackDecrease(nPenalty, nAttackBonus) }
  def effectAttackIncrease(nBonus: Int, nAttackBonus: Int) = wrap("effectAttackIncrease") { NWScript.effectAttackIncrease(nBonus, nAttackBonus) }
  def effectBeam(nBeamVisualEffect: Int, oEffector: NWObject, nCreaturePart: Int, bMissEffect: Boolean) = wrap("effectBeam") { NWScript.effectBeam(nBeamVisualEffect, oEffector, nCreaturePart, bMissEffect) }
  def effectBlindness = wrap("effectBlindness") { NWScript.effectBlindness }
  def effectCharmed = wrap("effectCharmed") { NWScript.effectCharmed }
  def effectConcealment(nPercentage: Int, nMissChanceType: Int) = wrap("effectConcealment") { NWScript.effectConcealment(nPercentage, nMissChanceType) }
  def effectConfused = wrap("effectConfused") { NWScript.effectConfused }
  def effectCurse(nStrMod: Int, nDexMod: Int, nConMod: Int, nIntMod: Int, nWisMod: Int, nChaMod: Int) = wrap("effectCurse") { NWScript.effectCurse(nStrMod, nDexMod, nConMod, nIntMod, nWisMod, nChaMod) }
  def effectCutsceneDominated = wrap("effectCutsceneDominated") { NWScript.effectCutsceneDominated }
  def effectCutsceneGhost = wrap("effectCutsceneGhost") { NWScript.effectCutsceneGhost }
  def effectCutsceneImmobilize = wrap("effectCutsceneImmobilize") { NWScript.effectCutsceneImmobilize }
  def effectCutsceneParalyze = wrap("effectCutsceneParalyze") { NWScript.effectCutsceneParalyze }
  def effectDamage(nDamageAmount: Int, nDamageType: Int, nDamagePower: Int) = wrap("effectDamage") { NWScript.effectDamage(nDamageAmount, nDamageType, nDamagePower) }
  def effectDamageDecrease(nPenalty: Int, nDamageType: Int) = wrap("effectDamageDecrease") { NWScript.effectDamageDecrease(nPenalty, nDamageType) }
  def effectDamageImmunityDecrease(nDamageType: Int, nPercentImmunity: Int) = wrap("effectDamageImmunityDecrease") { NWScript.effectDamageImmunityDecrease(nDamageType, nPercentImmunity) }
  def effectDamageImmunityIncrease(nDamageType: Int, nPercentImmunity: Int) = wrap("effectDamageImmunityIncrease") { NWScript.effectDamageImmunityIncrease(nDamageType, nPercentImmunity) }
  def effectDamageIncrease(nBonus: Int, nDamageType: Int) = wrap("effectDamageIncrease") { NWScript.effectDamageIncrease(nBonus, nDamageType) }
  def effectDamageReduction(nAmount: Int, nDamagePower: Int, nLimit: Int) = wrap("effectDamageReduction") { NWScript.effectDamageReduction(nAmount, nDamagePower, nLimit) }
  def effectDamageResistance(nDamageType: Int, nAmount: Int, nLimit: Int) = wrap("effectDamageResistance") { NWScript.effectDamageResistance(nDamageType, nAmount, nLimit) }
  def effectDamageShield(nDamageAmount: Int, nRandomAmount: Int, nDamageType: Int) = wrap("effectDamageShield") { NWScript.effectDamageShield(nDamageAmount, nRandomAmount, nDamageType) }
  def effectDarkness = wrap("effectDarkness") { NWScript.effectDarkness }
  def effectDazed = wrap("effectDazed") { NWScript.effectDazed }
  def effectDeaf = wrap("effectDeaf") { NWScript.effectDeaf }
  def effectDeath(bSpectacularDeath: Boolean, bDisplayFeedback: Boolean) = wrap("effectDeath") { NWScript.effectDeath(bSpectacularDeath, bDisplayFeedback) }
  def effectDisappear(nAnimation: Int) = wrap("effectDisappear") { NWScript.effectDisappear(nAnimation) }
  def effectDisappearAppear(lLocation: NWLocation, nAnimation: Int) = wrap("effectDisappearAppear") { NWScript.effectDisappearAppear(lLocation, nAnimation) }
  def effectDisease(nDiseaseType: Int) = wrap("effectDisease") { NWScript.effectDisease(nDiseaseType) }
  def effectDispelMagicAll(nCasterLevel: Int) = wrap("effectDispelMagicAll") { NWScript.effectDispelMagicAll(nCasterLevel) }
  def effectDispelMagicBest(nCasterLevel: Int) = wrap("effectDispelMagicBest") { NWScript.effectDispelMagicBest(nCasterLevel) }
  def effectDominated = wrap("effectDominated") { NWScript.effectDominated }
  def effectEntangle = wrap("effectEntangle") { NWScript.effectEntangle }
  def effectEthereal = wrap("effectEthereal") { NWScript.effectEthereal }
  def effectFrightened = wrap("effectFrightened") { NWScript.effectFrightened }
  def effectHaste = wrap("effectHaste") { NWScript.effectHaste }
  def effectHeal(nDamageToHeal: Int) = wrap("effectHeal") { NWScript.effectHeal(nDamageToHeal) }
  def effectHitPointChangeWhenDying(fHitPointChangePerRound: Float) = wrap("effectHitPointChangeWhenDying") { NWScript.effectHitPointChangeWhenDying(fHitPointChangePerRound) }
  def effectImmunity(nImmunityType: Int) = wrap("effectImmunity") { NWScript.effectImmunity(nImmunityType) }
  def effectInvisibility(nInvisibilityType: Int) = wrap("effectInvisibility") { NWScript.effectInvisibility(nInvisibilityType) }
  def effectKnockdown = wrap("effectKnockdown") { NWScript.effectKnockdown }
  def effectLinkEffects(eChildEffect: NWEffect, eParentEffect: NWEffect) = wrap("effectLinkEffects") { NWScript.effectLinkEffects(eChildEffect, eParentEffect) }
  def effectMissChance(nPercentage: Int, nMissChanceType: Int) = wrap("effectMissChance") { NWScript.effectMissChance(nPercentage, nMissChanceType) }
  def effectModifyAttacks(nAttacks: Int) = wrap("effectModifyAttacks") { NWScript.effectModifyAttacks(nAttacks) }
  def effectMovementSpeedDecrease(nPercentChange: Int) = wrap("effectMovementSpeedDecrease") { NWScript.effectMovementSpeedDecrease(nPercentChange) }
  def effectMovementSpeedIncrease(nPercentChange: Int) = wrap("effectMovementSpeedIncrease") { NWScript.effectMovementSpeedIncrease(nPercentChange) }
  def effectNegativeLevel(nNumLevels: Int, bHPBonus: Boolean) = wrap("effectNegativeLevel") { NWScript.effectNegativeLevel(nNumLevels, bHPBonus) }
  def effectParalyze = wrap("effectParalyze") { NWScript.effectParalyze }
  def effectPetrify = wrap("effectPetrify") { NWScript.effectPetrify }
  def effectPoison(nPoisonType: Int) = wrap("effectPoison") { NWScript.effectPoison(nPoisonType) }
  def effectPolymorph(nPolymorphSelection: Int, bLocked: Boolean) = wrap("effectPolymorph") { NWScript.effectPolymorph(nPolymorphSelection, bLocked) }
  def effectRegenerate(nAmount: Int, fIntervalSeconds: Float) = wrap("effectRegenerate") { NWScript.effectRegenerate(nAmount, fIntervalSeconds) }
  def effectResurrection = wrap("effectResurrection") { NWScript.effectResurrection }
  def effectSanctuary(nDifficultyClass: Int) = wrap("effectSanctuary") { NWScript.effectSanctuary(nDifficultyClass) }
  def effectSavingThrowDecrease(nSave: Int, nValue: Int, nSaveType: Int) = wrap("effectSavingThrowDecrease") { NWScript.effectSavingThrowDecrease(nSave, nValue, nSaveType) }
  def effectSavingThrowIncrease(nSave: Int, nValue: Int, nSaveType: Int) = wrap("effectSavingThrowIncrease") { NWScript.effectSavingThrowIncrease(nSave, nValue, nSaveType) }
  def effectSeeInvisible = wrap("effectSeeInvisible") { NWScript.effectSeeInvisible }
  def effectSilence = wrap("effectSilence") { NWScript.effectSilence }
  def effectSkillDecrease(nSkill: Int, nValue: Int) = wrap("effectSkillDecrease") { NWScript.effectSkillDecrease(nSkill, nValue) }
  def effectSkillIncrease(nSkill: Int, nValue: Int) = wrap("effectSkillIncrease") { NWScript.effectSkillIncrease(nSkill, nValue) }
  def effectSleep = wrap("effectSleep") { NWScript.effectSleep }
  def effectSlow = wrap("effectSlow") { NWScript.effectSlow }
  def effectSpellFailure(nPercent: Int, nSpellSchool: Int) = wrap("effectSpellFailure") { NWScript.effectSpellFailure(nPercent, nSpellSchool) }
  def effectSpellImmunity(nImmunityToSpell: Int) = wrap("effectSpellImmunity") { NWScript.effectSpellImmunity(nImmunityToSpell) }
  def effectSpellLevelAbsorption(nMaxSpellLevelAbsorbed: Int, nTotalSpellLevelsAbsorbed: Int, nSpellSchool: Int) = wrap("effectSpellLevelAbsorption") { NWScript.effectSpellLevelAbsorption(nMaxSpellLevelAbsorbed, nTotalSpellLevelsAbsorbed, nSpellSchool) }
  def effectSpellResistanceDecrease(nValue: Int) = wrap("effectSpellResistanceDecrease") { NWScript.effectSpellResistanceDecrease(nValue) }
  def effectSpellResistanceIncrease(nValue: Int) = wrap("effectSpellResistanceIncrease") { NWScript.effectSpellResistanceIncrease(nValue) }
  def effectStunned = wrap("effectStunned") { NWScript.effectStunned }
  def effectSummonCreature(sCreatureResref: String, nVisualEffectId: Int, fDelaySeconds: Float, bUseAppearAnimation: Boolean) = wrap("effectSummonCreature") { NWScript.effectSummonCreature(sCreatureResref, nVisualEffectId, fDelaySeconds, bUseAppearAnimation) }
  def effectSwarm(bLooping: Boolean, sCreatureTemplate1: String, sCreatureTemplate2: String, sCreatureTemplate3: String, sCreatureTemplate4: String) = wrap("effectSwarm") { NWScript.effectSwarm(bLooping, sCreatureTemplate1, sCreatureTemplate2, sCreatureTemplate3, sCreatureTemplate4) }
  def effectTemporaryHitpoints(nHitPoints: Int) = wrap("effectTemporaryHitpoints") { NWScript.effectTemporaryHitpoints(nHitPoints) }
  def effectTimeStop = wrap("effectTimeStop") { NWScript.effectTimeStop }
  def effectTrueSeeing = wrap("effectTrueSeeing") { NWScript.effectTrueSeeing }
  def effectTurnResistanceDecrease(nHitDice: Int) = wrap("effectTurnResistanceDecrease") { NWScript.effectTurnResistanceDecrease(nHitDice) }
  def effectTurnResistanceIncrease(nHitDice: Int) = wrap("effectTurnResistanceIncrease") { NWScript.effectTurnResistanceIncrease(nHitDice) }
  def effectTurned = wrap("effectTurned") { NWScript.effectTurned }
  def effectUltravision = wrap("effectUltravision") { NWScript.effectUltravision }
  def effectVisualEffect(nVisualEffectId: Int, bMissEffect: Boolean) = wrap("effectVisualEffect") { NWScript.effectVisualEffect(nVisualEffectId, bMissEffect) }
  def endGame(sEndMovie: String) = wrap("endGame") { NWScript.endGame(sEndMovie) }
  def executeScript(sScript: String, oTarget: NWObject) = wrap("executeScript") { NWScript.executeScript(sScript, oTarget) }
  def exploreAreaForPlayer(oArea: NWObject, oPlayer: NWObject, bExplored: Boolean) = wrap("exploreAreaForPlayer") { NWScript.exploreAreaForPlayer(oArea, oPlayer, bExplored) }
  def exportAllCharacters = wrap("exportAllCharacters") { NWScript.exportAllCharacters }
  def exportSingleCharacter(oPlayer: NWObject) = wrap("exportSingleCharacter") { NWScript.exportSingleCharacter(oPlayer) }
  def extraordinaryEffect(eEffect: NWEffect) = wrap("extraordinaryEffect") { NWScript.extraordinaryEffect(eEffect) }
  def fadeFromBlack(oCreature: NWObject, fSpeed: Float) = wrap("fadeFromBlack") { NWScript.fadeFromBlack(oCreature, fSpeed) }
  def fadeToBlack(oCreature: NWObject, fSpeed: Float) = wrap("fadeToBlack") { NWScript.fadeToBlack(oCreature, fSpeed) }
  def feetToMeters(fFeet: Float) = wrap("feetToMeters") { NWScript.feetToMeters(fFeet) }
  def findSubString(sString: String, sSubString: String, nStart: Int) = wrap("findSubString") { NWScript.findSubString(sString, sSubString, nStart) }
  def floatToInt(fFloat: Float) = wrap("floatToInt") { NWScript.floatToInt(fFloat) }
  def floatToString(fFloat: Float, nWidth: Int, nDecimals: Int) = wrap("floatToString") { NWScript.floatToString(fFloat, nWidth, nDecimals) }
  def floatingTextStrRefOnCreature(nStrRefToDisplay: Int, oCreatureToFloatAbove: NWObject, bBroadcastToFaction: Boolean) = wrap("floatingTextStrRefOnCreature") { NWScript.floatingTextStrRefOnCreature(nStrRefToDisplay, oCreatureToFloatAbove, bBroadcastToFaction) }
  def floatingTextStringOnCreature(sStringToDisplay: String, oCreatureToFloatAbove: NWObject, bBroadcastToFaction: Boolean) = wrap("floatingTextStringOnCreature") { NWScript.floatingTextStringOnCreature(sStringToDisplay, oCreatureToFloatAbove, bBroadcastToFaction) }
  def forceRest(oCreature: NWObject) = wrap("forceRest") { NWScript.forceRest(oCreature) }
  def fortitudeSave(oCreature: NWObject, nDC: Int, nSaveType: Int, oSaveVersus: NWObject) = wrap("fortitudeSave") { NWScript.fortitudeSave(oCreature, nDC, nSaveType, oSaveVersus) }
  def get2DAString(s2DA: String, sColumn: String, nRow: Int) = wrap("get2DAString") { NWScript.get2DAString(s2DA, sColumn, nRow) }
  def getAC(oObject: NWObject) = wrap("getAC") { NWScript.getAC(oObject) }
  def getAILevel(oTarget: NWObject) = wrap("getAILevel") { NWScript.getAILevel(oTarget) }
  def getAbilityModifier(nAbility: Int, oCreature: NWObject) = wrap("getAbilityModifier") { NWScript.getAbilityModifier(nAbility, oCreature) }
  def getAbilityScore(oCreature: NWObject, nAbility: Int, bBaseAbilityScore: Boolean) = wrap("getAbilityScore") { NWScript.getAbilityScore(oCreature, nAbility, bBaseAbilityScore) }
  def getActionMode(oCreature: NWObject, nActionMode: Int) = wrap("getActionMode") { NWScript.getActionMode(oCreature, nActionMode) }
  def getAge(oCreature: NWObject) = wrap("getAge") { NWScript.getAge(oCreature) }
  def getAlignmentGoodEvil(oCreature: NWObject) = wrap("getAlignmentGoodEvil") { NWScript.getAlignmentGoodEvil(oCreature) }
  def getAlignmentLawChaos(oCreature: NWObject) = wrap("getAlignmentLawChaos") { NWScript.getAlignmentLawChaos(oCreature) }
  def getAnimalCompanionCreatureType(oCreature: NWObject) = wrap("getAnimalCompanionCreatureType") { NWScript.getAnimalCompanionCreatureType(oCreature) }
  def getAnimalCompanionName(oTarget: NWObject) = wrap("getAnimalCompanionName") { NWScript.getAnimalCompanionName(oTarget) }
  def getAppearanceType(oCreature: NWObject) = wrap("getAppearanceType") { NWScript.getAppearanceType(oCreature) }
  def getArcaneSpellFailure(oCreature: NWObject) = wrap("getArcaneSpellFailure") { NWScript.getArcaneSpellFailure(oCreature) }
  def getArea(oTarget: NWObject) = wrap("getArea") { NWScript.getArea(oTarget) }
  def getAreaFromLocation(lLocation: NWLocation) = wrap("getAreaFromLocation") { NWScript.getAreaFromLocation(lLocation) }
  def getAreaOfEffectCreator(oAreaOfEffectObject: NWObject) = wrap("getAreaOfEffectCreator") { NWScript.getAreaOfEffectCreator(oAreaOfEffectObject) }
  def getAreaSize(nAreaDimension: Int, oArea: NWObject) = wrap("getAreaSize") { NWScript.getAreaSize(nAreaDimension, oArea) }
  def getAssociate(nAssociateType: Int, oMaster: NWObject, nTh: Int) = wrap("getAssociate") { NWScript.getAssociate(nAssociateType, oMaster, nTh) }
  def getAssociateType(oAssociate: NWObject) = wrap("getAssociateType") { NWScript.getAssociateType(oAssociate) }
  def getAttackTarget(oCreature: NWObject) = wrap("getAttackTarget") { NWScript.getAttackTarget(oCreature) }
  def getAttemptedAttackTarget = wrap("getAttemptedAttackTarget") { NWScript.getAttemptedAttackTarget }
  def getAttemptedSpellTarget = wrap("getAttemptedSpellTarget") { NWScript.getAttemptedSpellTarget }
  def getBaseAttackBonus(oCreature: NWObject) = wrap("getBaseAttackBonus") { NWScript.getBaseAttackBonus(oCreature) }
  def getBaseItemType(oItem: NWObject) = wrap("getBaseItemType") { NWScript.getBaseItemType(oItem) }
  def getBlockingDoor = wrap("getBlockingDoor") { NWScript.getBlockingDoor }
  def getCalendarDay = wrap("getCalendarDay") { NWScript.getCalendarDay }
  def getCalendarMonth = wrap("getCalendarMonth") { NWScript.getCalendarMonth }
  def getCalendarYear = wrap("getCalendarYear") { NWScript.getCalendarYear }
  def getCampaignFloat(sCampaignName: String, sVarName: String, oPlayer: NWObject) = wrap("getCampaignFloat") { NWScript.getCampaignFloat(sCampaignName, sVarName, oPlayer) }
  def getCampaignInt(sCampaignName: String, sVarName: String, oPlayer: NWObject) = wrap("getCampaignInt") { NWScript.getCampaignInt(sCampaignName, sVarName, oPlayer) }
  def getCampaignLocation(sCampaignName: String, sVarName: String, oPlayer: NWObject) = wrap("getCampaignLocation") { NWScript.getCampaignLocation(sCampaignName, sVarName, oPlayer) }
  def getCampaignString(sCampaignName: String, sVarName: String, oPlayer: NWObject) = wrap("getCampaignString") { NWScript.getCampaignString(sCampaignName, sVarName, oPlayer) }
  def getCampaignVector(sCampaignName: String, sVarName: String, oPlayer: NWObject) = wrap("getCampaignVector") { NWScript.getCampaignVector(sCampaignName, sVarName, oPlayer) }
  def getCasterLevel(oCreature: NWObject) = wrap("getCasterLevel") { NWScript.getCasterLevel(oCreature) }
  def getChallengeRating(oCreature: NWObject) = wrap("getChallengeRating") { NWScript.getChallengeRating(oCreature) }
  def getClassByPosition(nClassPosition: Int, oCreature: NWObject) = wrap("getClassByPosition") { NWScript.getClassByPosition(nClassPosition, oCreature) }
  def getClickingObject = wrap("getClickingObject") { NWScript.getClickingObject }
  def getColor(oObject: NWObject, nColorChannel: Int) = wrap("getColor") { NWScript.getColor(oObject, nColorChannel) }
  def getCommandable(oTarget: NWObject) = wrap("getCommandable") { NWScript.getCommandable(oTarget) }
  def getCreatureBodyPart(nCreaturePart: Int, oCreature: NWObject) = wrap("getCreatureBodyPart") { NWScript.getCreatureBodyPart(nCreaturePart, oCreature) }
  def getCreatureSize(oCreature: NWObject) = wrap("getCreatureSize") { NWScript.getCreatureSize(oCreature) }
  def getCreatureStartingPackage(oCreature: NWObject) = wrap("getCreatureStartingPackage") { NWScript.getCreatureStartingPackage(oCreature) }
  def getCreatureTailType(oCreature: NWObject) = wrap("getCreatureTailType") { NWScript.getCreatureTailType(oCreature) }
  def getCreatureWingType(oCreature: NWObject) = wrap("getCreatureWingType") { NWScript.getCreatureWingType(oCreature) }
  def getCurrentAction(oObject: NWObject) = wrap("getCurrentAction") { NWScript.getCurrentAction(oObject) }
  def getCurrentHitPoints(oObject: NWObject) = wrap("getCurrentHitPoints") { NWScript.getCurrentHitPoints(oObject) }
  def getCutsceneCameraMoveRate(oCreature: NWObject) = wrap("getCutsceneCameraMoveRate") { NWScript.getCutsceneCameraMoveRate(oCreature) }
  def getCutsceneMode(oCreature: NWObject) = wrap("getCutsceneMode") { NWScript.getCutsceneMode(oCreature) }
  def getDamageDealtByType(nDamageType: Int) = wrap("getDamageDealtByType") { NWScript.getDamageDealtByType(nDamageType) }
  def getDefensiveCastingMode(oCreature: NWObject) = wrap("getDefensiveCastingMode") { NWScript.getDefensiveCastingMode(oCreature) }
  def getDeity(oCreature: NWObject) = wrap("getDeity") { NWScript.getDeity(oCreature) }
  def getDescription(oObject: NWObject, bOriginalDescription: Boolean, bIdentifiedDescription: Boolean) = wrap("getDescription") { NWScript.getDescription(oObject, bOriginalDescription, bIdentifiedDescription) }
  def getDetectMode(oCreature: NWObject) = wrap("getDetectMode") { NWScript.getDetectMode(oCreature) }
  def getDialogSoundLength(nStrRef: Int) = wrap("getDialogSoundLength") { NWScript.getDialogSoundLength(nStrRef) }
  def getDistanceBetween(oObjectA: NWObject, oObjectB: NWObject) = wrap("getDistanceBetween") { NWScript.getDistanceBetween(oObjectA, oObjectB) }
  def getDistanceBetweenLocations(lLocationA: NWLocation, lLocationB: NWLocation) = wrap("getDistanceBetweenLocations") { NWScript.getDistanceBetweenLocations(lLocationA, lLocationB) }
  def getDistanceToObject(oObject: NWObject) = wrap("getDistanceToObject") { NWScript.getDistanceToObject(oObject) }
  def getDroppableFlag(oItem: NWObject) = wrap("getDroppableFlag") { NWScript.getDroppableFlag(oItem) }
  def getEffectCreator(eEffect: NWEffect) = wrap("getEffectCreator") { NWScript.getEffectCreator(eEffect) }
  def getEffectDurationType(eEffect: NWEffect) = wrap("getEffectDurationType") { NWScript.getEffectDurationType(eEffect) }
  def getEffectSpellId(eSpellEffect: NWEffect) = wrap("getEffectSpellId") { NWScript.getEffectSpellId(eSpellEffect) }
  def getEffectSubType(eEffect: NWEffect) = wrap("getEffectSubType") { NWScript.getEffectSubType(eEffect) }
  def getEffectType(eEffect: NWEffect) = wrap("getEffectType") { NWScript.getEffectType(eEffect) }
  def getEncounterActive(oEncounter: NWObject) = wrap("getEncounterActive") { NWScript.getEncounterActive(oEncounter) }
  def getEncounterDifficulty(oEncounter: NWObject) = wrap("getEncounterDifficulty") { NWScript.getEncounterDifficulty(oEncounter) }
  def getEncounterSpawnsCurrent(oEncounter: NWObject) = wrap("getEncounterSpawnsCurrent") { NWScript.getEncounterSpawnsCurrent(oEncounter) }
  def getEncounterSpawnsMax(oEncounter: NWObject) = wrap("getEncounterSpawnsMax") { NWScript.getEncounterSpawnsMax(oEncounter) }
  def getEnteringObject = wrap("getEnteringObject") { NWScript.getEnteringObject }
  def getExitingObject = wrap("getExitingObject") { NWScript.getExitingObject }
  def getFacing(oTarget: NWObject) = wrap("getFacing") { NWScript.getFacing(oTarget) }
  def getFacingFromLocation(lLocation: NWLocation) = wrap("getFacingFromLocation") { NWScript.getFacingFromLocation(lLocation) }
  def getFactionAverageGoodEvilAlignment(oFactionMember: NWObject) = wrap("getFactionAverageGoodEvilAlignment") { NWScript.getFactionAverageGoodEvilAlignment(oFactionMember) }
  def getFactionAverageLawChaosAlignment(oFactionMember: NWObject) = wrap("getFactionAverageLawChaosAlignment") { NWScript.getFactionAverageLawChaosAlignment(oFactionMember) }
  def getFactionAverageLevel(oFactionMember: NWObject) = wrap("getFactionAverageLevel") { NWScript.getFactionAverageLevel(oFactionMember) }
  def getFactionAverageReputation(oSourceFactionMember: NWObject, oTarget: NWObject) = wrap("getFactionAverageReputation") { NWScript.getFactionAverageReputation(oSourceFactionMember, oTarget) }
  def getFactionAverageXP(oFactionMember: NWObject) = wrap("getFactionAverageXP") { NWScript.getFactionAverageXP(oFactionMember) }
  def getFactionBestAC(oFactionMember: NWObject, bMustBeVisible: Boolean) = wrap("getFactionBestAC") { NWScript.getFactionBestAC(oFactionMember, bMustBeVisible) }
  def getFactionEqual(oFirstObject: NWObject, oSecondObject: NWObject) = wrap("getFactionEqual") { NWScript.getFactionEqual(oFirstObject, oSecondObject) }
  def getFactionGold(oFactionMember: NWObject) = wrap("getFactionGold") { NWScript.getFactionGold(oFactionMember) }
  def getFactionLeader(oMemberOfFaction: NWObject) = wrap("getFactionLeader") { NWScript.getFactionLeader(oMemberOfFaction) }
  def getFactionLeastDamagedMember(oFactionMember: NWObject, bMustBeVisible: Boolean) = wrap("getFactionLeastDamagedMember") { NWScript.getFactionLeastDamagedMember(oFactionMember, bMustBeVisible) }
  def getFactionMostDamagedMember(oFactionMember: NWObject, bMustBeVisible: Boolean) = wrap("getFactionMostDamagedMember") { NWScript.getFactionMostDamagedMember(oFactionMember, bMustBeVisible) }
  def getFactionMostFrequentClass(oFactionMember: NWObject) = wrap("getFactionMostFrequentClass") { NWScript.getFactionMostFrequentClass(oFactionMember) }
  def getFactionStrongestMember(oFactionMember: NWObject, bMustBeVisible: Boolean) = wrap("getFactionStrongestMember") { NWScript.getFactionStrongestMember(oFactionMember, bMustBeVisible) }
  def getFactionWeakestMember(oFactionMember: NWObject, bMustBeVisible: Boolean) = wrap("getFactionWeakestMember") { NWScript.getFactionWeakestMember(oFactionMember, bMustBeVisible) }
  def getFactionWorstAC(oFactionMember: NWObject, bMustBeVisible: Boolean) = wrap("getFactionWorstAC") { NWScript.getFactionWorstAC(oFactionMember, bMustBeVisible) }
  def getFamiliarCreatureType(oCreature: NWObject) = wrap("getFamiliarCreatureType") { NWScript.getFamiliarCreatureType(oCreature) }
  def getFamiliarName(oCreature: NWObject) = wrap("getFamiliarName") { NWScript.getFamiliarName(oCreature) }
  def getFogAmount(nFogType: Int, oArea: NWObject) = wrap("getFogAmount") { NWScript.getFogAmount(nFogType, oArea) }
  def getFogColor(nFogType: Int, oArea: NWObject) = wrap("getFogColor") { NWScript.getFogColor(nFogType, oArea) }
  def getFootstepType(oCreature: NWObject) = wrap("getFootstepType") { NWScript.getFootstepType(oCreature) }
  def getFortitudeSavingThrow(oTarget: NWObject) = wrap("getFortitudeSavingThrow") { NWScript.getFortitudeSavingThrow(oTarget) }
  def getGameDifficulty = wrap("getGameDifficulty") { NWScript.getGameDifficulty }
  def getGender(oCreature: NWObject) = wrap("getGender") { NWScript.getGender(oCreature) }
  def getGoingToBeAttackedBy(oTarget: NWObject) = wrap("getGoingToBeAttackedBy") { NWScript.getGoingToBeAttackedBy(oTarget) }
  def getGold(oTarget: NWObject) = wrap("getGold") { NWScript.getGold(oTarget) }
  def getGoldPieceValue(oItem: NWObject) = wrap("getGoldPieceValue") { NWScript.getGoldPieceValue(oItem) }
  def getGoodEvilValue(oCreature: NWObject) = wrap("getGoodEvilValue") { NWScript.getGoodEvilValue(oCreature) }
  def getHardness(oObject: NWObject) = wrap("getHardness") { NWScript.getHardness(oObject) }
  def getHasFeat(nFeat: Int, oCreature: NWObject) = wrap("getHasFeat") { NWScript.getHasFeat(nFeat, oCreature) }
  def getHasFeatEffect(nFeat: Int, oObject: NWObject) = wrap("getHasFeatEffect") { NWScript.getHasFeatEffect(nFeat, oObject) }
  def getHasInventory(oObject: NWObject) = wrap("getHasInventory") { NWScript.getHasInventory(oObject) }
  def getHasSkill(nSkill: Int, oCreature: NWObject) = wrap("getHasSkill") { NWScript.getHasSkill(nSkill, oCreature) }
  def getHasSpell(nSpell: Int, oCreature: NWObject) = wrap("getHasSpell") { NWScript.getHasSpell(nSpell, oCreature) }
  def getHasSpellEffect(nSpell: Int, oObject: NWObject) = wrap("getHasSpellEffect") { NWScript.getHasSpellEffect(nSpell, oObject) }
  def getHenchman(oMaster: NWObject, nNth: Int) = wrap("getHenchman") { NWScript.getHenchman(oMaster, nNth) }
  def getHitDice(oCreature: NWObject) = wrap("getHitDice") { NWScript.getHitDice(oCreature) }
  def getIdentified(oItem: NWObject) = wrap("getIdentified") { NWScript.getIdentified(oItem) }
  def getImmortal(oTarget: NWObject) = wrap("getImmortal") { NWScript.getImmortal(oTarget) }
  def getInfiniteFlag(oItem: NWObject) = wrap("getInfiniteFlag") { NWScript.getInfiniteFlag(oItem) }
  def getInventoryDisturbItem = wrap("getInventoryDisturbItem") { NWScript.getInventoryDisturbItem }
  def getInventoryDisturbType = wrap("getInventoryDisturbType") { NWScript.getInventoryDisturbType }
  def getIsAreaAboveGround(oArea: NWObject) = wrap("getIsAreaAboveGround") { NWScript.getIsAreaAboveGround(oArea) }
  def getIsAreaInterior(oArea: NWObject) = wrap("getIsAreaInterior") { NWScript.getIsAreaInterior(oArea) }
  def getIsAreaNatural(oArea: NWObject) = wrap("getIsAreaNatural") { NWScript.getIsAreaNatural(oArea) }
  def getIsCreatureDisarmable(oCreature: NWObject) = wrap("getIsCreatureDisarmable") { NWScript.getIsCreatureDisarmable(oCreature) }
  def getIsDM(oCreature: NWObject) = wrap("getIsDM") { NWScript.getIsDM(oCreature) }
  def getIsDMPossessed(oCreature: NWObject) = wrap("getIsDMPossessed") { NWScript.getIsDMPossessed(oCreature) }
  def getIsDawn = wrap("getIsDawn") { NWScript.getIsDawn }
  def getIsDay = wrap("getIsDay") { NWScript.getIsDay }
  def getIsDead(oCreature: NWObject) = wrap("getIsDead") { NWScript.getIsDead(oCreature) }
  def getIsDoorActionPossible(oTargetDoor: NWObject, nDoorAction: Int) = wrap("getIsDoorActionPossible") { NWScript.getIsDoorActionPossible(oTargetDoor, nDoorAction) }
  def getIsDusk = wrap("getIsDusk") { NWScript.getIsDusk }
  def getIsEffectValid(eEffect: NWEffect) = wrap("getIsEffectValid") { NWScript.getIsEffectValid(eEffect) }
  def getIsEncounterCreature(oCreature: NWObject) = wrap("getIsEncounterCreature") { NWScript.getIsEncounterCreature(oCreature) }
  def getIsEnemy(oTarget: NWObject, oSource: NWObject) = wrap("getIsEnemy") { NWScript.getIsEnemy(oTarget, oSource) }
  def getIsFriend(oTarget: NWObject, oSource: NWObject) = wrap("getIsFriend") { NWScript.getIsFriend(oTarget, oSource) }
  def getIsImmune(oCreature: NWObject, nImmunityType: Int, oVersus: NWObject) = wrap("getIsImmune") { NWScript.getIsImmune(oCreature, nImmunityType, oVersus) }
  def getIsInCombat(oCreature: NWObject) = wrap("getIsInCombat") { NWScript.getIsInCombat(oCreature) }
  def getIsInSubArea(oCreature: NWObject, oSubArea: NWObject) = wrap("getIsInSubArea") { NWScript.getIsInSubArea(oCreature, oSubArea) }
  def getIsItemPropertyValid(ipProperty: NWItemProperty) = wrap("getIsItemPropertyValid") { NWScript.getIsItemPropertyValid(ipProperty) }
  def getIsListening(oObject: NWObject) = wrap("getIsListening") { NWScript.getIsListening(oObject) }
  def getIsNeutral(oTarget: NWObject, oSource: NWObject) = wrap("getIsNeutral") { NWScript.getIsNeutral(oTarget, oSource) }
  def getIsNight = wrap("getIsNight") { NWScript.getIsNight }
  def getIsObjectValid(oObject: NWObject) = wrap("getIsObjectValid") { NWScript.getIsObjectValid(oObject) }
  def getIsOpen(oObject: NWObject) = wrap("getIsOpen") { NWScript.getIsOpen(oObject) }
  def getIsPC(oCreature: NWObject) = wrap("getIsPC") { NWScript.getIsPC(oCreature) }
  def getIsPlaceableObjectActionPossible(oPlaceable: NWObject, nPlaceableAction: Int) = wrap("getIsPlaceableObjectActionPossible") { NWScript.getIsPlaceableObjectActionPossible(oPlaceable, nPlaceableAction) }
  def getIsPlayableRacialType(oCreature: NWObject) = wrap("getIsPlayableRacialType") { NWScript.getIsPlayableRacialType(oCreature) }
  def getIsPossessedFamiliar(oCreature: NWObject) = wrap("getIsPossessedFamiliar") { NWScript.getIsPossessedFamiliar(oCreature) }
  def getIsReactionTypeFriendly(oTarget: NWObject, oSource: NWObject) = wrap("getIsReactionTypeFriendly") { NWScript.getIsReactionTypeFriendly(oTarget, oSource) }
  def getIsReactionTypeHostile(oTarget: NWObject, oSource: NWObject) = wrap("getIsReactionTypeHostile") { NWScript.getIsReactionTypeHostile(oTarget, oSource) }
  def getIsReactionTypeNeutral(oTarget: NWObject, oSource: NWObject) = wrap("getIsReactionTypeNeutral") { NWScript.getIsReactionTypeNeutral(oTarget, oSource) }
  def getIsResting(oCreature: NWObject) = wrap("getIsResting") { NWScript.getIsResting(oCreature) }
  def getIsSkillSuccessful(oTarget: NWObject, nSkill: Int, nDifficulty: Int) = wrap("getIsSkillSuccessful") { NWScript.getIsSkillSuccessful(oTarget, nSkill, nDifficulty) }
  def getIsTrapped(oObject: NWObject) = wrap("getIsTrapped") { NWScript.getIsTrapped(oObject) }
  def getIsWeaponEffective(oVersus: NWObject, bOffHand: Boolean) = wrap("getIsWeaponEffective") { NWScript.getIsWeaponEffective(oVersus, bOffHand) }
  def getItemACValue(oItem: NWObject) = wrap("getItemACValue") { NWScript.getItemACValue(oItem) }
  def getItemActivated = wrap("getItemActivated") { NWScript.getItemActivated }
  def getItemActivatedTarget = wrap("getItemActivatedTarget") { NWScript.getItemActivatedTarget }
  def getItemActivatedTargetLocation = wrap("getItemActivatedTargetLocation") { NWScript.getItemActivatedTargetLocation }
  def getItemActivator = wrap("getItemActivator") { NWScript.getItemActivator }
  def getItemAppearance(oItem: NWObject, nType: Int, nIndex: Int) = wrap("getItemAppearance") { NWScript.getItemAppearance(oItem, nType, nIndex) }
  def getItemCharges(oItem: NWObject) = wrap("getItemCharges") { NWScript.getItemCharges(oItem) }
  def getItemCursedFlag(oItem: NWObject) = wrap("getItemCursedFlag") { NWScript.getItemCursedFlag(oItem) }
  def getItemHasItemProperty(oItem: NWObject, nProperty: Int) = wrap("getItemHasItemProperty") { NWScript.getItemHasItemProperty(oItem, nProperty) }
  def getItemInSlot(nInventorySlot: Int, oCreature: NWObject) = wrap("getItemInSlot") { NWScript.getItemInSlot(nInventorySlot, oCreature) }
  def getItemPossessedBy(oCreature: NWObject, sItemTag: String) = wrap("getItemPossessedBy") { NWScript.getItemPossessedBy(oCreature, sItemTag) }
  def getItemPossessor(oItem: NWObject) = wrap("getItemPossessor") { NWScript.getItemPossessor(oItem) }
  def getItemPropertyCostTable(iProp: NWItemProperty) = wrap("getItemPropertyCostTable") { NWScript.getItemPropertyCostTable(iProp) }
  def getItemPropertyCostTableValue(iProp: NWItemProperty) = wrap("getItemPropertyCostTableValue") { NWScript.getItemPropertyCostTableValue(iProp) }
  def getItemPropertyDurationType(ip: NWItemProperty) = wrap("getItemPropertyDurationType") { NWScript.getItemPropertyDurationType(ip) }
  def getItemPropertyParam1(iProp: NWItemProperty) = wrap("getItemPropertyParam1") { NWScript.getItemPropertyParam1(iProp) }
  def getItemPropertyParam1Value(iProp: NWItemProperty) = wrap("getItemPropertyParam1Value") { NWScript.getItemPropertyParam1Value(iProp) }
  def getItemPropertySubType(iProperty: NWItemProperty) = wrap("getItemPropertySubType") { NWScript.getItemPropertySubType(iProperty) }
  def getItemPropertyType(ip: NWItemProperty) = wrap("getItemPropertyType") { NWScript.getItemPropertyType(ip) }
  def getItemStackSize(oItem: NWObject) = wrap("getItemStackSize") { NWScript.getItemStackSize(oItem) }
  def getJournalQuestExperience(szPlotID: String) = wrap("getJournalQuestExperience") { NWScript.getJournalQuestExperience(szPlotID) }
  def getKeyRequiredFeedback(oObject: NWObject) = wrap("getKeyRequiredFeedback") { NWScript.getKeyRequiredFeedback(oObject) }
  def getLastAssociateCommand(oAssociate: NWObject) = wrap("getLastAssociateCommand") { NWScript.getLastAssociateCommand(oAssociate) }
  def getLastAttackMode(oCreature: NWObject) = wrap("getLastAttackMode") { NWScript.getLastAttackMode(oCreature) }
  def getLastAttackType(oCreature: NWObject) = wrap("getLastAttackType") { NWScript.getLastAttackType(oCreature) }
  def getLastAttacker(oAttackee: NWObject) = wrap("getLastAttacker") { NWScript.getLastAttacker(oAttackee) }
  def getLastClosedBy = wrap("getLastClosedBy") { NWScript.getLastClosedBy }
  def getLastDamager(oObject: NWObject) = wrap("getLastDamager") { NWScript.getLastDamager(oObject) }
  def getLastDisarmed = wrap("getLastDisarmed") { NWScript.getLastDisarmed }
  def getLastDisturbed = wrap("getLastDisturbed") { NWScript.getLastDisturbed }
  def getLastHostileActor(oVictim: NWObject) = wrap("getLastHostileActor") { NWScript.getLastHostileActor(oVictim) }
  def getLastKiller = wrap("getLastKiller") { NWScript.getLastKiller }
  def getLastLocked = wrap("getLastLocked") { NWScript.getLastLocked }
  def getLastOpenedBy = wrap("getLastOpenedBy") { NWScript.getLastOpenedBy }
  def getLastPCRested = wrap("getLastPCRested") { NWScript.getLastPCRested }
  def getLastPCToCancelCutscene = wrap("getLastPCToCancelCutscene") { NWScript.getLastPCToCancelCutscene }
  def getLastPerceived = wrap("getLastPerceived") { NWScript.getLastPerceived }
  def getLastPerceptionHeard = wrap("getLastPerceptionHeard") { NWScript.getLastPerceptionHeard }
  def getLastPerceptionInaudible = wrap("getLastPerceptionInaudible") { NWScript.getLastPerceptionInaudible }
  def getLastPerceptionSeen = wrap("getLastPerceptionSeen") { NWScript.getLastPerceptionSeen }
  def getLastPerceptionVanished = wrap("getLastPerceptionVanished") { NWScript.getLastPerceptionVanished }
  def getLastPlayerDied = wrap("getLastPlayerDied") { NWScript.getLastPlayerDied }
  def getLastPlayerDying = wrap("getLastPlayerDying") { NWScript.getLastPlayerDying }
  def getLastRespawnButtonPresser = wrap("getLastRespawnButtonPresser") { NWScript.getLastRespawnButtonPresser }
  def getLastRestEventType = wrap("getLastRestEventType") { NWScript.getLastRestEventType }
  def getLastSpeaker = wrap("getLastSpeaker") { NWScript.getLastSpeaker }
  def getLastSpell = wrap("getLastSpell") { NWScript.getLastSpell }
  def getLastSpellCastClass = wrap("getLastSpellCastClass") { NWScript.getLastSpellCastClass }
  def getLastSpellCaster = wrap("getLastSpellCaster") { NWScript.getLastSpellCaster }
  def getLastSpellHarmful = wrap("getLastSpellHarmful") { NWScript.getLastSpellHarmful }
  def getLastTrapDetected(oTarget: NWObject) = wrap("getLastTrapDetected") { NWScript.getLastTrapDetected(oTarget) }
  def getLastUnlocked = wrap("getLastUnlocked") { NWScript.getLastUnlocked }
  def getLastUsedBy = wrap("getLastUsedBy") { NWScript.getLastUsedBy }
  def getLastWeaponUsed(oCreature: NWObject) = wrap("getLastWeaponUsed") { NWScript.getLastWeaponUsed(oCreature) }
  def getLawChaosValue(oCreature: NWObject) = wrap("getLawChaosValue") { NWScript.getLawChaosValue(oCreature) }
  def getLevelByClass(nClassType: Int, oCreature: NWObject) = wrap("getLevelByClass") { NWScript.getLevelByClass(nClassType, oCreature) }
  def getLevelByPosition(nClassPosition: Int, oCreature: NWObject) = wrap("getLevelByPosition") { NWScript.getLevelByPosition(nClassPosition, oCreature) }
  def getListenPatternNumber = wrap("getListenPatternNumber") { NWScript.getListenPatternNumber }
  def getLocalFloat(oObject: NWObject, sVarName: String) = wrap("getLocalFloat") { NWScript.getLocalFloat(oObject, sVarName) }
  def getLocalInt(oObject: NWObject, sVarName: String) = wrap("getLocalInt") { NWScript.getLocalInt(oObject, sVarName) }
  def getLocalLocation(oObject: NWObject, sVarName: String) = wrap("getLocalLocation") { NWScript.getLocalLocation(oObject, sVarName) }
  def getLocalObject(oObject: NWObject, sVarName: String) = wrap("getLocalObject") { NWScript.getLocalObject(oObject, sVarName) }
  def getLocalString(oObject: NWObject, sVarName: String) = wrap("getLocalString") { NWScript.getLocalString(oObject, sVarName) }
  def getLocation(oObject: NWObject) = wrap("getLocation") { NWScript.getLocation(oObject) }
  def getLockKeyRequired(oObject: NWObject) = wrap("getLockKeyRequired") { NWScript.getLockKeyRequired(oObject) }
  def getLockKeyTag(oObject: NWObject) = wrap("getLockKeyTag") { NWScript.getLockKeyTag(oObject) }
  def getLockLockDC(oObject: NWObject) = wrap("getLockLockDC") { NWScript.getLockLockDC(oObject) }
  def getLockLockable(oObject: NWObject) = wrap("getLockLockable") { NWScript.getLockLockable(oObject) }
  def getLockUnlockDC(oObject: NWObject) = wrap("getLockUnlockDC") { NWScript.getLockUnlockDC(oObject) }
  def getLocked(oTarget: NWObject) = wrap("getLocked") { NWScript.getLocked(oTarget) }
  def getLootable(oCreature: NWObject) = wrap("getLootable") { NWScript.getLootable(oCreature) }
  def getMaster(oAssociate: NWObject) = wrap("getMaster") { NWScript.getMaster(oAssociate) }
  def getMatchedSubstring(nString: Int) = wrap("getMatchedSubstring") { NWScript.getMatchedSubstring(nString) }
  def getMatchedSubstringsCount = wrap("getMatchedSubstringsCount") { NWScript.getMatchedSubstringsCount }
  def getMaxHenchmen = wrap("getMaxHenchmen") { NWScript.getMaxHenchmen }
  def getMaxHitPoints(oObject: NWObject) = wrap("getMaxHitPoints") { NWScript.getMaxHitPoints(oObject) }
  def getMetaMagicFeat = wrap("getMetaMagicFeat") { NWScript.getMetaMagicFeat }
  def getModuleItemAcquired = wrap("getModuleItemAcquired") { NWScript.getModuleItemAcquired }
  def getModuleItemAcquiredBy = wrap("getModuleItemAcquiredBy") { NWScript.getModuleItemAcquiredBy }
  def getModuleItemAcquiredFrom = wrap("getModuleItemAcquiredFrom") { NWScript.getModuleItemAcquiredFrom }
  def getModuleItemAcquiredStackSize = wrap("getModuleItemAcquiredStackSize") { NWScript.getModuleItemAcquiredStackSize }
  def getModuleItemLost = wrap("getModuleItemLost") { NWScript.getModuleItemLost }
  def getModuleItemLostBy = wrap("getModuleItemLostBy") { NWScript.getModuleItemLostBy }
  def getModuleName = wrap("getModuleName") { NWScript.getModuleName }
  def getModuleXPScale = wrap("getModuleXPScale") { NWScript.getModuleXPScale }
  def getMovementRate(oCreature: NWObject) = wrap("getMovementRate") { NWScript.getMovementRate(oCreature) }
  def getName(oObject: NWObject, bOriginalName: Boolean) = wrap("getName") { NWScript.getName(oObject, bOriginalName) }
  def getNearestCreature(nFirstCriteriaType: Int, nFirstCriteriaValue: Int, oTarget: NWObject, nNth: Int, nSecondCriteriaType: Int, nSecondCriteriaValue: Int, nThirdCriteriaType: Int, nThirdCriteriaValue: Int) = wrap("getNearestCreature") { NWScript.getNearestCreature(nFirstCriteriaType, nFirstCriteriaValue, oTarget, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue) }
  def getNearestCreatureToLocation(nFirstCriteriaType: Int, nFirstCriteriaValue: Int, lLocation: NWLocation, nNth: Int, nSecondCriteriaType: Int, nSecondCriteriaValue: Int, nThirdCriteriaType: Int, nThirdCriteriaValue: Int) = wrap("getNearestCreatureToLocation") { NWScript.getNearestCreatureToLocation(nFirstCriteriaType, nFirstCriteriaValue, lLocation, nNth, nSecondCriteriaType, nSecondCriteriaValue, nThirdCriteriaType, nThirdCriteriaValue) }
  def getNearestObject(nObjectType: Int, oTarget: NWObject, nNth: Int) = wrap("getNearestObject") { NWScript.getNearestObject(nObjectType, oTarget, nNth) }
  def getNearestObjectByTag(sTag: String, oTarget: NWObject, nNth: Int) = wrap("getNearestObjectByTag") { NWScript.getNearestObjectByTag(sTag, oTarget, nNth) }
  def getNearestObjectToLocation(nObjectType: Int, lLocation: NWLocation, nNth: Int) = wrap("getNearestObjectToLocation") { NWScript.getNearestObjectToLocation(nObjectType, lLocation, nNth) }
  def getNearestTrapToObject(oTarget: NWObject, bTrapDetected: Boolean) = wrap("getNearestTrapToObject") { NWScript.getNearestTrapToObject(oTarget, bTrapDetected) }
  def getNumStackedItems(oItem: NWObject) = wrap("getNumStackedItems") { NWScript.getNumStackedItems(oItem) }
  def getObjectByTag(sTag: String, nNth: Int) = wrap("getObjectByTag") { NWScript.getObjectByTag(sTag, nNth) }
  def getObjectHeard(oTarget: NWObject, oSource: NWObject) = wrap("getObjectHeard") { NWScript.getObjectHeard(oTarget, oSource) }
  def getObjectSeen(oTarget: NWObject, oSource: NWObject) = wrap("getObjectSeen") { NWScript.getObjectSeen(oTarget, oSource) }
  def getObjectType(oTarget: NWObject) = wrap("getObjectType") { NWScript.getObjectType(oTarget) }
  def getPCChatMessage = wrap("getPCChatMessage") { NWScript.getPCChatMessage }
  def getPCChatSpeaker = wrap("getPCChatSpeaker") { NWScript.getPCChatSpeaker }
  def getPCChatVolume = wrap("getPCChatVolume") { NWScript.getPCChatVolume }
  def getPCIPAddress(oPlayer: NWObject) = wrap("getPCIPAddress") { NWScript.getPCIPAddress(oPlayer) }
  def getPCItemLastEquipped = wrap("getPCItemLastEquipped") { NWScript.getPCItemLastEquipped }
  def getPCItemLastEquippedBy = wrap("getPCItemLastEquippedBy") { NWScript.getPCItemLastEquippedBy }
  def getPCItemLastUnequipped = wrap("getPCItemLastUnequipped") { NWScript.getPCItemLastUnequipped }
  def getPCItemLastUnequippedBy = wrap("getPCItemLastUnequippedBy") { NWScript.getPCItemLastUnequippedBy }
  def getPCLevellingUp = wrap("getPCLevellingUp") { NWScript.getPCLevellingUp }
  def getPCPlayerName(oPlayer: NWObject) = wrap("getPCPlayerName") { NWScript.getPCPlayerName(oPlayer) }
  def getPCPublicCDKey(oPlayer: NWObject, bSinglePlayerCDKey: Boolean) = wrap("getPCPublicCDKey") { NWScript.getPCPublicCDKey(oPlayer, bSinglePlayerCDKey) }
  def getPCSpeaker = wrap("getPCSpeaker") { NWScript.getPCSpeaker }
  def getPhenoType(oCreature: NWObject) = wrap("getPhenoType") { NWScript.getPhenoType(oCreature) }
  def getPickpocketableFlag(oItem: NWObject) = wrap("getPickpocketableFlag") { NWScript.getPickpocketableFlag(oItem) }
  def getPlaceableIllumination(oPlaceable: NWObject) = wrap("getPlaceableIllumination") { NWScript.getPlaceableIllumination(oPlaceable) }
  def getPlaceableLastClickedBy = wrap("getPlaceableLastClickedBy") { NWScript.getPlaceableLastClickedBy }
  def getPlotFlag(oTarget: NWObject) = wrap("getPlotFlag") { NWScript.getPlotFlag(oTarget) }
  def getPortraitId(oTarget: NWObject) = wrap("getPortraitId") { NWScript.getPortraitId(oTarget) }
  def getPortraitResRef(oTarget: NWObject) = wrap("getPortraitResRef") { NWScript.getPortraitResRef(oTarget) }
  def getPosition(oTarget: NWObject) = wrap("getPosition") { NWScript.getPosition(oTarget) }
  def getPositionFromLocation(lLocation: NWLocation) = wrap("getPositionFromLocation") { NWScript.getPositionFromLocation(lLocation) }
  def getRacialType(oCreature: NWObject) = wrap("getRacialType") { NWScript.getRacialType(oCreature) }
  def getReflexAdjustedDamage(nDamage: Int, oTarget: NWObject, nDC: Int, nSaveType: Int, oSaveVersus: NWObject) = wrap("getReflexAdjustedDamage") { NWScript.getReflexAdjustedDamage(nDamage, oTarget, nDC, nSaveType, oSaveVersus) }
  def getReflexSavingThrow(oTarget: NWObject) = wrap("getReflexSavingThrow") { NWScript.getReflexSavingThrow(oTarget) }
  def getReputation(oSource: NWObject, oTarget: NWObject) = wrap("getReputation") { NWScript.getReputation(oSource, oTarget) }
  def getResRef(oObject: NWObject) = wrap("getResRef") { NWScript.getResRef(oObject) }
  def getSittingCreature(oChair: NWObject) = wrap("getSittingCreature") { NWScript.getSittingCreature(oChair) }
  def getSkillRank(nSkill: Int, oTarget: NWObject, bBaseSkillRank: Boolean) = wrap("getSkillRank") { NWScript.getSkillRank(nSkill, oTarget, bBaseSkillRank) }
  def getSkyBox(oArea: NWObject) = wrap("getSkyBox") { NWScript.getSkyBox(oArea) }
  def getSpellCastItem = wrap("getSpellCastItem") { NWScript.getSpellCastItem }
  def getSpellId = wrap("getSpellId") { NWScript.getSpellId }
  def getSpellResistance(oCreature: NWObject) = wrap("getSpellResistance") { NWScript.getSpellResistance(oCreature) }
  def getSpellSaveDC = wrap("getSpellSaveDC") { NWScript.getSpellSaveDC }
  def getSpellTargetLocation = wrap("getSpellTargetLocation") { NWScript.getSpellTargetLocation }
  def getSpellTargetObject = wrap("getSpellTargetObject") { NWScript.getSpellTargetObject }
  def getStandardFactionReputation(nStandardFaction: Int, oCreature: NWObject) = wrap("getStandardFactionReputation") { NWScript.getStandardFactionReputation(nStandardFaction, oCreature) }
  def getStartingLocation = wrap("getStartingLocation") { NWScript.getStartingLocation }
  def getStealthMode(oCreature: NWObject) = wrap("getStealthMode") { NWScript.getStealthMode(oCreature) }
  def getStolenFlag(oStolen: NWObject) = wrap("getStolenFlag") { NWScript.getStolenFlag(oStolen) }
  def getStoreGold(oidStore: NWObject) = wrap("getStoreGold") { NWScript.getStoreGold(oidStore) }
  def getStoreIdentifyCost(oidStore: NWObject) = wrap("getStoreIdentifyCost") { NWScript.getStoreIdentifyCost(oidStore) }
  def getStoreMaxBuyPrice(oidStore: NWObject) = wrap("getStoreMaxBuyPrice") { NWScript.getStoreMaxBuyPrice(oidStore) }
  def getStrRefSoundDuration(nStrRef: Int) = wrap("getStrRefSoundDuration") { NWScript.getStrRefSoundDuration(nStrRef) }
  def getStringByStrRef(nStrRef: Int, nGender: Int) = wrap("getStringByStrRef") { NWScript.getStringByStrRef(nStrRef, nGender) }
  def getStringLeft(sString: String, nCount: Int) = wrap("getStringLeft") { NWScript.getStringLeft(sString, nCount) }
  def getStringLength(sString: String) = wrap("getStringLength") { NWScript.getStringLength(sString) }
  def getStringLowerCase(sString: String) = wrap("getStringLowerCase") { NWScript.getStringLowerCase(sString) }
  def getStringRight(sString: String, nCount: Int) = wrap("getStringRight") { NWScript.getStringRight(sString, nCount) }
  def getStringUpperCase(sString: String) = wrap("getStringUpperCase") { NWScript.getStringUpperCase(sString) }
  def getSubRace(oTarget: NWObject) = wrap("getSubRace") { NWScript.getSubRace(oTarget) }
  def getSubString(sString: String, nStart: Int, nCount: Int) = wrap("getSubString") { NWScript.getSubString(sString, nStart, nCount) }
  def getTag(oObject: NWObject) = wrap("getTag") { NWScript.getTag(oObject) }
  def getTileMainLight1Color(lTile: NWLocation) = wrap("getTileMainLight1Color") { NWScript.getTileMainLight1Color(lTile) }
  def getTileMainLight2Color(lTile: NWLocation) = wrap("getTileMainLight2Color") { NWScript.getTileMainLight2Color(lTile) }
  def getTileSourceLight1Color(lTile: NWLocation) = wrap("getTileSourceLight1Color") { NWScript.getTileSourceLight1Color(lTile) }
  def getTileSourceLight2Color(lTile: NWLocation) = wrap("getTileSourceLight2Color") { NWScript.getTileSourceLight2Color(lTile) }
  def getTilesetResRef(oArea: NWObject) = wrap("getTilesetResRef") { NWScript.getTilesetResRef(oArea) }
  def getTimeHour = wrap("getTimeHour") { NWScript.getTimeHour }
  def getTimeMillisecond = wrap("getTimeMillisecond") { NWScript.getTimeMillisecond }
  def getTimeMinute = wrap("getTimeMinute") { NWScript.getTimeMinute }
  def getTimeSecond = wrap("getTimeSecond") { NWScript.getTimeSecond }
  def getTotalDamageDealt = wrap("getTotalDamageDealt") { NWScript.getTotalDamageDealt }
  def getTransitionTarget(oTransition: NWObject) = wrap("getTransitionTarget") { NWScript.getTransitionTarget(oTransition) }
  def getTrapActive(oTrapObject: NWObject) = wrap("getTrapActive") { NWScript.getTrapActive(oTrapObject) }
  def getTrapBaseType(oTrapObject: NWObject) = wrap("getTrapBaseType") { NWScript.getTrapBaseType(oTrapObject) }
  def getTrapCreator(oTrapObject: NWObject) = wrap("getTrapCreator") { NWScript.getTrapCreator(oTrapObject) }
  def getTrapDetectDC(oTrapObject: NWObject) = wrap("getTrapDetectDC") { NWScript.getTrapDetectDC(oTrapObject) }
  def getTrapDetectable(oTrapObject: NWObject) = wrap("getTrapDetectable") { NWScript.getTrapDetectable(oTrapObject) }
  def getTrapDetectedBy(oTrapObject: NWObject, oCreature: NWObject) = wrap("getTrapDetectedBy") { NWScript.getTrapDetectedBy(oTrapObject, oCreature) }
  def getTrapDisarmDC(oTrapObject: NWObject) = wrap("getTrapDisarmDC") { NWScript.getTrapDisarmDC(oTrapObject) }
  def getTrapDisarmable(oTrapObject: NWObject) = wrap("getTrapDisarmable") { NWScript.getTrapDisarmable(oTrapObject) }
  def getTrapFlagged(oTrapObject: NWObject) = wrap("getTrapFlagged") { NWScript.getTrapFlagged(oTrapObject) }
  def getTrapKeyTag(oTrapObject: NWObject) = wrap("getTrapKeyTag") { NWScript.getTrapKeyTag(oTrapObject) }
  def getTrapOneShot(oTrapObject: NWObject) = wrap("getTrapOneShot") { NWScript.getTrapOneShot(oTrapObject) }
  def getTrapRecoverable(oTrapObject: NWObject) = wrap("getTrapRecoverable") { NWScript.getTrapRecoverable(oTrapObject) }
  def getTurnResistanceHD(oUndead: NWObject) = wrap("getTurnResistanceHD") { NWScript.getTurnResistanceHD(oUndead) }
  def getUseableFlag(oObject: NWObject) = wrap("getUseableFlag") { NWScript.getUseableFlag(oObject) }
  def getUserDefinedEventNumber = wrap("getUserDefinedEventNumber") { NWScript.getUserDefinedEventNumber }
  def getWaypointByTag(sWaypointTag: String) = wrap("getWaypointByTag") { NWScript.getWaypointByTag(sWaypointTag) }
  def getWeaponRanged(oItem: NWObject) = wrap("getWeaponRanged") { NWScript.getWeaponRanged(oItem) }
  def getWeather(oArea: NWObject) = wrap("getWeather") { NWScript.getWeather(oArea) }
  def getWeight(oTarget: NWObject) = wrap("getWeight") { NWScript.getWeight(oTarget) }
  def getWillSavingThrow(oTarget: NWObject) = wrap("getWillSavingThrow") { NWScript.getWillSavingThrow(oTarget) }
  def getXP(oCreature: NWObject) = wrap("getXP") { NWScript.getXP(oCreature) }
  def giveGoldToCreature(oCreature: NWObject, nGP: Int) = wrap("giveGoldToCreature") { NWScript.giveGoldToCreature(oCreature, nGP) }
  def giveXPToCreature(oCreature: NWObject, nXpAmount: Int) = wrap("giveXPToCreature") { NWScript.giveXPToCreature(oCreature, nXpAmount) }
  def hoursToSeconds(nHours: Int) = wrap("hoursToSeconds") { NWScript.hoursToSeconds(nHours) }
  def incrementRemainingFeatUses(oCreature: NWObject, nFeat: Int) = wrap("incrementRemainingFeatUses") { NWScript.incrementRemainingFeatUses(oCreature, nFeat) }
  def insertString(sDestination: String, sString: String, nPosition: Int) = wrap("insertString") { NWScript.insertString(sDestination, sString, nPosition) }
  def intToFloat(nInteger: Int) = wrap("intToFloat") { NWScript.intToFloat(nInteger) }
  def intToHexString(nInteger: Int) = wrap("intToHexString") { NWScript.intToHexString(nInteger) }
  def intToString(nInteger: Int) = wrap("intToString") { NWScript.intToString(nInteger) }
  def isInConversation(oObject: NWObject) = wrap("isInConversation") { NWScript.isInConversation(oObject) }
  def itemPropertyACBonus(nBonus: Int) = wrap("itemPropertyACBonus") { NWScript.itemPropertyACBonus(nBonus) }
  def itemPropertyACBonusVsAlign(nIPAlignGroup: Int, nACBonus: Int) = wrap("itemPropertyACBonusVsAlign") { NWScript.itemPropertyACBonusVsAlign(nIPAlignGroup, nACBonus) }
  def itemPropertyACBonusVsDmgType(nIPDamageType: Int, nACBonus: Int) = wrap("itemPropertyACBonusVsDmgType") { NWScript.itemPropertyACBonusVsDmgType(nIPDamageType, nACBonus) }
  def itemPropertyACBonusVsRace(nIPRacialType: Int, nACBonus: Int) = wrap("itemPropertyACBonusVsRace") { NWScript.itemPropertyACBonusVsRace(nIPRacialType, nACBonus) }
  def itemPropertyACBonusVsSAlign(nAlignment: Int, nACBonus: Int) = wrap("itemPropertyACBonusVsSAlign") { NWScript.itemPropertyACBonusVsSAlign(nAlignment, nACBonus) }
  def itemPropertyAbilityBonus(nAbility: Int, nBonus: Int) = wrap("itemPropertyAbilityBonus") { NWScript.itemPropertyAbilityBonus(nAbility, nBonus) }
  def itemPropertyAdditional(nAdditionalProperty: Int) = wrap("itemPropertyAdditional") { NWScript.itemPropertyAdditional(nAdditionalProperty) }
  def itemPropertyArcaneSpellFailure(nModLevel: Int) = wrap("itemPropertyArcaneSpellFailure") { NWScript.itemPropertyArcaneSpellFailure(nModLevel) }
  def itemPropertyAttackBonus(nBonus: Int) = wrap("itemPropertyAttackBonus") { NWScript.itemPropertyAttackBonus(nBonus) }
  def itemPropertyAttackBonusVsAlign(nIPAlignGroup: Int, nBonus: Int) = wrap("itemPropertyAttackBonusVsAlign") { NWScript.itemPropertyAttackBonusVsAlign(nIPAlignGroup, nBonus) }
  def itemPropertyAttackBonusVsRace(nIPRacialType: Int, nBonus: Int) = wrap("itemPropertyAttackBonusVsRace") { NWScript.itemPropertyAttackBonusVsRace(nIPRacialType, nBonus) }
  def itemPropertyAttackBonusVsSAlign(nAlignment: Int, nBonus: Int) = wrap("itemPropertyAttackBonusVsSAlign") { NWScript.itemPropertyAttackBonusVsSAlign(nAlignment, nBonus) }
  def itemPropertyAttackPenalty(nPenalty: Int) = wrap("itemPropertyAttackPenalty") { NWScript.itemPropertyAttackPenalty(nPenalty) }
  def itemPropertyBonusFeat(nFeat: Int) = wrap("itemPropertyBonusFeat") { NWScript.itemPropertyBonusFeat(nFeat) }
  def itemPropertyBonusLevelSpell(nClass: Int, nSpellLevel: Int) = wrap("itemPropertyBonusLevelSpell") { NWScript.itemPropertyBonusLevelSpell(nClass, nSpellLevel) }
  def itemPropertyBonusSavingThrow(nBaseSaveType: Int, nBonus: Int) = wrap("itemPropertyBonusSavingThrow") { NWScript.itemPropertyBonusSavingThrow(nBaseSaveType, nBonus) }
  def itemPropertyBonusSavingThrowVsX(nBonusType: Int, nBonus: Int) = wrap("itemPropertyBonusSavingThrowVsX") { NWScript.itemPropertyBonusSavingThrowVsX(nBonusType, nBonus) }
  def itemPropertyBonusSpellResistance(nBonus: Int) = wrap("itemPropertyBonusSpellResistance") { NWScript.itemPropertyBonusSpellResistance(nBonus) }
  def itemPropertyCastSpell(nSpell: Int, nNumUses: Int) = wrap("itemPropertyCastSpell") { NWScript.itemPropertyCastSpell(nSpell, nNumUses) }
  def itemPropertyContainerReducedWeight(nContainerType: Int) = wrap("itemPropertyContainerReducedWeight") { NWScript.itemPropertyContainerReducedWeight(nContainerType) }
  def itemPropertyDamageBonus(nIPDamageType: Int, nDamage: Int) = wrap("itemPropertyDamageBonus") { NWScript.itemPropertyDamageBonus(nIPDamageType, nDamage) }
  def itemPropertyDamageBonusVsAlign(nIPAlignGroup: Int, nIPDamageType: Int, nDamage: Int) = wrap("itemPropertyDamageBonusVsAlign") { NWScript.itemPropertyDamageBonusVsAlign(nIPAlignGroup, nIPDamageType, nDamage) }
  def itemPropertyDamageBonusVsRace(nIPRacialType: Int, nIPDamageType: Int, nDamage: Int) = wrap("itemPropertyDamageBonusVsRace") { NWScript.itemPropertyDamageBonusVsRace(nIPRacialType, nIPDamageType, nDamage) }
  def itemPropertyDamageBonusVsSAlign(nAlignment: Int, nIPDamageType: Int, nDamage: Int) = wrap("itemPropertyDamageBonusVsSAlign") { NWScript.itemPropertyDamageBonusVsSAlign(nAlignment, nIPDamageType, nDamage) }
  def itemPropertyDamageImmunity(nIPDamageType: Int, nImmuneBonus: Int) = wrap("itemPropertyDamageImmunity") { NWScript.itemPropertyDamageImmunity(nIPDamageType, nImmuneBonus) }
  def itemPropertyDamagePenalty(nPenalty: Int) = wrap("itemPropertyDamagePenalty") { NWScript.itemPropertyDamagePenalty(nPenalty) }
  def itemPropertyDamageReduction(nEnhancement: Int, nHPSoak: Int) = wrap("itemPropertyDamageReduction") { NWScript.itemPropertyDamageReduction(nEnhancement, nHPSoak) }
  def itemPropertyDamageResistance(nIPDamageType: Int, nHPResist: Int) = wrap("itemPropertyDamageResistance") { NWScript.itemPropertyDamageResistance(nIPDamageType, nHPResist) }
  def itemPropertyDamageVulnerability(nIPDamageType: Int, nVulnerability: Int) = wrap("itemPropertyDamageVulnerability") { NWScript.itemPropertyDamageVulnerability(nIPDamageType, nVulnerability) }
  def itemPropertyDarkvision = wrap("itemPropertyDarkvision") { NWScript.itemPropertyDarkvision }
  def itemPropertyDecreaseAC(nModifierType: Int, nPenalty: Int) = wrap("itemPropertyDecreaseAC") { NWScript.itemPropertyDecreaseAC(nModifierType, nPenalty) }
  def itemPropertyDecreaseAbility(nAbility: Int, nModifier: Int) = wrap("itemPropertyDecreaseAbility") { NWScript.itemPropertyDecreaseAbility(nAbility, nModifier) }
  def itemPropertyDecreaseSkill(nSkill: Int, nPenalty: Int) = wrap("itemPropertyDecreaseSkill") { NWScript.itemPropertyDecreaseSkill(nSkill, nPenalty) }
  def itemPropertyEnhancementBonus(nEnhancementBonus: Int) = wrap("itemPropertyEnhancementBonus") { NWScript.itemPropertyEnhancementBonus(nEnhancementBonus) }
  def itemPropertyEnhancementBonusVsAlign(nIPAlignGroup: Int, nBonus: Int) = wrap("itemPropertyEnhancementBonusVsAlign") { NWScript.itemPropertyEnhancementBonusVsAlign(nIPAlignGroup, nBonus) }
  def itemPropertyEnhancementBonusVsRace(nIPRacialType: Int, nBonus: Int) = wrap("itemPropertyEnhancementBonusVsRace") { NWScript.itemPropertyEnhancementBonusVsRace(nIPRacialType, nBonus) }
  def itemPropertyEnhancementBonusVsSAlign(nAlignment: Int, nBonus: Int) = wrap("itemPropertyEnhancementBonusVsSAlign") { NWScript.itemPropertyEnhancementBonusVsSAlign(nAlignment, nBonus) }
  def itemPropertyEnhancementPenalty(nPenalty: Int) = wrap("itemPropertyEnhancementPenalty") { NWScript.itemPropertyEnhancementPenalty(nPenalty) }
  def itemPropertyExtraMeleeDamageType(nIPDamageType: Int) = wrap("itemPropertyExtraMeleeDamageType") { NWScript.itemPropertyExtraMeleeDamageType(nIPDamageType) }
  def itemPropertyExtraRangeDamageType(nIPDamageType: Int) = wrap("itemPropertyExtraRangeDamageType") { NWScript.itemPropertyExtraRangeDamageType(nIPDamageType) }
  def itemPropertyFreeAction = wrap("itemPropertyFreeAction") { NWScript.itemPropertyFreeAction }
  def itemPropertyHaste = wrap("itemPropertyHaste") { NWScript.itemPropertyHaste }
  def itemPropertyHealersKit(nModifier: Int) = wrap("itemPropertyHealersKit") { NWScript.itemPropertyHealersKit(nModifier) }
  def itemPropertyHolyAvenger = wrap("itemPropertyHolyAvenger") { NWScript.itemPropertyHolyAvenger }
  def itemPropertyImmunityMisc(nIPMiscImmunityType: Int) = wrap("itemPropertyImmunityMisc") { NWScript.itemPropertyImmunityMisc(nIPMiscImmunityType) }
  def itemPropertyImmunityToSpellLevel(nLevel: Int) = wrap("itemPropertyImmunityToSpellLevel") { NWScript.itemPropertyImmunityToSpellLevel(nLevel) }
  def itemPropertyImprovedEvasion = wrap("itemPropertyImprovedEvasion") { NWScript.itemPropertyImprovedEvasion }
  def itemPropertyKeen = wrap("itemPropertyKeen") { NWScript.itemPropertyKeen }
  def itemPropertyLight(nBrightness: Int, nColor: Int) = wrap("itemPropertyLight") { NWScript.itemPropertyLight(nBrightness, nColor) }
  def itemPropertyLimitUseByAlign(nIPAlignGroup: Int) = wrap("itemPropertyLimitUseByAlign") { NWScript.itemPropertyLimitUseByAlign(nIPAlignGroup) }
  def itemPropertyLimitUseByClass(nClass: Int) = wrap("itemPropertyLimitUseByClass") { NWScript.itemPropertyLimitUseByClass(nClass) }
  def itemPropertyLimitUseByRace(nIPRacialType: Int) = wrap("itemPropertyLimitUseByRace") { NWScript.itemPropertyLimitUseByRace(nIPRacialType) }
  def itemPropertyLimitUseBySAlign(nAlignment: Int) = wrap("itemPropertyLimitUseBySAlign") { NWScript.itemPropertyLimitUseBySAlign(nAlignment) }
  def itemPropertyMassiveCritical(nDamage: Int) = wrap("itemPropertyMassiveCritical") { NWScript.itemPropertyMassiveCritical(nDamage) }
  def itemPropertyMaterial(nMaterialType: Int) = wrap("itemPropertyMaterial") { NWScript.itemPropertyMaterial(nMaterialType) }
  def itemPropertyMaxRangeStrengthMod(nModifier: Int) = wrap("itemPropertyMaxRangeStrengthMod") { NWScript.itemPropertyMaxRangeStrengthMod(nModifier) }
  def itemPropertyMonsterDamage(nDamage: Int) = wrap("itemPropertyMonsterDamage") { NWScript.itemPropertyMonsterDamage(nDamage) }
  def itemPropertyNoDamage = wrap("itemPropertyNoDamage") { NWScript.itemPropertyNoDamage }
  def itemPropertyOnHitCastSpell(nSpell: Int, nLevel: Int) = wrap("itemPropertyOnHitCastSpell") { NWScript.itemPropertyOnHitCastSpell(nSpell, nLevel) }
  def itemPropertyOnHitProps(nProperty: Int, nSaveDC: Int, nSpecial: Int) = wrap("itemPropertyOnHitProps") { NWScript.itemPropertyOnHitProps(nProperty, nSaveDC, nSpecial) }
  def itemPropertyOnMonsterHitProperties(nProperty: Int, nSpecial: Int) = wrap("itemPropertyOnMonsterHitProperties") { NWScript.itemPropertyOnMonsterHitProperties(nProperty, nSpecial) }
  def itemPropertyQuality(nQuality: Int) = wrap("itemPropertyQuality") { NWScript.itemPropertyQuality(nQuality) }
  def itemPropertyReducedSavingThrow(nBonusType: Int, nPenalty: Int) = wrap("itemPropertyReducedSavingThrow") { NWScript.itemPropertyReducedSavingThrow(nBonusType, nPenalty) }
  def itemPropertyReducedSavingThrowVsX(nBaseSaveType: Int, nPenalty: Int) = wrap("itemPropertyReducedSavingThrowVsX") { NWScript.itemPropertyReducedSavingThrowVsX(nBaseSaveType, nPenalty) }
  def itemPropertyRegeneration(nRegenAmount: Int) = wrap("itemPropertyRegeneration") { NWScript.itemPropertyRegeneration(nRegenAmount) }
  def itemPropertySkillBonus(nSkill: Int, nBonus: Int) = wrap("itemPropertySkillBonus") { NWScript.itemPropertySkillBonus(nSkill, nBonus) }
  def itemPropertySpecialWalk(nWalkType: Int) = wrap("itemPropertySpecialWalk") { NWScript.itemPropertySpecialWalk(nWalkType) }
  def itemPropertySpellImmunitySchool(nIPSpellSchool: Int) = wrap("itemPropertySpellImmunitySchool") { NWScript.itemPropertySpellImmunitySchool(nIPSpellSchool) }
  def itemPropertySpellImmunitySpecific(nSpell: Int) = wrap("itemPropertySpellImmunitySpecific") { NWScript.itemPropertySpellImmunitySpecific(nSpell) }
  def itemPropertyThievesTools(nModifier: Int) = wrap("itemPropertyThievesTools") { NWScript.itemPropertyThievesTools(nModifier) }
  def itemPropertyTrap(nTrapLevel: Int, nIPTrapType: Int) = wrap("itemPropertyTrap") { NWScript.itemPropertyTrap(nTrapLevel, nIPTrapType) }
  def itemPropertyTrueSeeing = wrap("itemPropertyTrueSeeing") { NWScript.itemPropertyTrueSeeing }
  def itemPropertyTurnResistance(nModifier: Int) = wrap("itemPropertyTurnResistance") { NWScript.itemPropertyTurnResistance(nModifier) }
  def itemPropertyUnlimitedAmmo(nAmmoDamage: Int) = wrap("itemPropertyUnlimitedAmmo") { NWScript.itemPropertyUnlimitedAmmo(nAmmoDamage) }
  def itemPropertyVampiricRegeneration(nRegenAmount: Int) = wrap("itemPropertyVampiricRegeneration") { NWScript.itemPropertyVampiricRegeneration(nRegenAmount) }
  def itemPropertyVisualEffect(nEffect: Int) = wrap("itemPropertyVisualEffect") { NWScript.itemPropertyVisualEffect(nEffect) }
  def itemPropertyWeightIncrease(nWeight: Int) = wrap("itemPropertyWeightIncrease") { NWScript.itemPropertyWeightIncrease(nWeight) }
  def itemPropertyWeightReduction(nReduction: Int) = wrap("itemPropertyWeightReduction") { NWScript.itemPropertyWeightReduction(nReduction) }
  def jumpToLocation(lDestination: NWLocation) = wrap("jumpToLocation") { NWScript.jumpToLocation(lDestination) }
  def jumpToObject(oToJumpTo: NWObject, bWalkStraightLineToPoint: Boolean) = wrap("jumpToObject") { NWScript.jumpToObject(oToJumpTo, bWalkStraightLineToPoint) }
  def levelUpHenchman(oCreature: NWObject, nClass: Int, bReadyAllSpells: Boolean, nPackage: Int) = wrap("levelUpHenchman") { NWScript.levelUpHenchman(oCreature, nClass, bReadyAllSpells, nPackage) }
  def lineOfSightObject(oSource: NWObject, oTarget: NWObject) = wrap("lineOfSightObject") { NWScript.lineOfSightObject(oSource, oTarget) }
  def lineOfSightVector(vSource: NWVector, vTarget: NWVector) = wrap("lineOfSightVector") { NWScript.lineOfSightVector(vSource, vTarget) }
  def location(oArea: NWObject, vPosition: NWVector, fOrientation: Float) = wrap("location") { NWScript.location(oArea, vPosition, fOrientation) }
  def lockCameraDirection(oPlayer: NWObject, bLocked: Boolean) = wrap("lockCameraDirection") { NWScript.lockCameraDirection(oPlayer, bLocked) }
  def lockCameraDistance(oPlayer: NWObject, bLocked: Boolean) = wrap("lockCameraDistance") { NWScript.lockCameraDistance(oPlayer, bLocked) }
  def lockCameraPitch(oPlayer: NWObject, bLocked: Boolean) = wrap("lockCameraPitch") { NWScript.lockCameraPitch(oPlayer, bLocked) }
  def magicalEffect(eEffect: NWEffect) = wrap("magicalEffect") { NWScript.magicalEffect(eEffect) }
  def musicBackgroundChangeDay(oArea: NWObject, nTrack: Int) = wrap("musicBackgroundChangeDay") { NWScript.musicBackgroundChangeDay(oArea, nTrack) }
  def musicBackgroundChangeNight(oArea: NWObject, nTrack: Int) = wrap("musicBackgroundChangeNight") { NWScript.musicBackgroundChangeNight(oArea, nTrack) }
  def musicBackgroundGetBattleTrack(oArea: NWObject) = wrap("musicBackgroundGetBattleTrack") { NWScript.musicBackgroundGetBattleTrack(oArea) }
  def musicBackgroundGetDayTrack(oArea: NWObject) = wrap("musicBackgroundGetDayTrack") { NWScript.musicBackgroundGetDayTrack(oArea) }
  def musicBackgroundGetNightTrack(oArea: NWObject) = wrap("musicBackgroundGetNightTrack") { NWScript.musicBackgroundGetNightTrack(oArea) }
  def musicBackgroundPlay(oArea: NWObject) = wrap("musicBackgroundPlay") { NWScript.musicBackgroundPlay(oArea) }
  def musicBackgroundSetDelay(oArea: NWObject, nDelay: Int) = wrap("musicBackgroundSetDelay") { NWScript.musicBackgroundSetDelay(oArea, nDelay) }
  def musicBackgroundStop(oArea: NWObject) = wrap("musicBackgroundStop") { NWScript.musicBackgroundStop(oArea) }
  def musicBattleChange(oArea: NWObject, nTrack: Int) = wrap("musicBattleChange") { NWScript.musicBattleChange(oArea, nTrack) }
  def musicBattlePlay(oArea: NWObject) = wrap("musicBattlePlay") { NWScript.musicBattlePlay(oArea) }
  def musicBattleStop(oArea: NWObject) = wrap("musicBattleStop") { NWScript.musicBattleStop(oArea) }
  def nightToDay(oPlayer: NWObject, fTransitionTime: Float) = wrap("nightToDay") { NWScript.nightToDay(oPlayer, fTransitionTime) }
  def openInventory(oCreature: NWObject, oPlayer: NWObject) = wrap("openInventory") { NWScript.openInventory(oCreature, oPlayer) }
  def openStore(oStore: NWObject, oPC: NWObject, nBonusMarkUp: Int, nBonusMarkDown: Int) = wrap("openStore") { NWScript.openStore(oStore, oPC, nBonusMarkUp, nBonusMarkDown) }
  def playAnimation(nAnimation: Int, fSpeed: Float, fSeconds: Float) = wrap("playAnimation") { NWScript.playAnimation(nAnimation, fSpeed, fSeconds) }
  def playSound(sSoundName: String) = wrap("playSound") { NWScript.playSound(sSoundName) }
  def playSoundByStrRef(nStrRef: Int, nRunAsAction: Int) = wrap("playSoundByStrRef") { NWScript.playSoundByStrRef(nStrRef, nRunAsAction) }
  def playVoiceChat(nVoiceChatID: Int, oTarget: NWObject) = wrap("playVoiceChat") { NWScript.playVoiceChat(nVoiceChatID, oTarget) }
  def popUpDeathGUIPanel(oPC: NWObject, bRespawnButtonEnabled: Boolean, bWaitForHelpButtonEnabled: Boolean, nHelpStringReference: Int, sHelpString: String) = wrap("popUpDeathGUIPanel") { NWScript.popUpDeathGUIPanel(oPC, bRespawnButtonEnabled, bWaitForHelpButtonEnabled, nHelpStringReference, sHelpString) }
  def popUpGUIPanel(oPC: NWObject, nGUIPanel: Int) = wrap("popUpGUIPanel") { NWScript.popUpGUIPanel(oPC, nGUIPanel) }
  def printFloat(fFloat: Float, nWidth: Int, nDecimals: Int) = wrap("printFloat") { NWScript.printFloat(fFloat, nWidth, nDecimals) }
  def printInteger(nInteger: Int) = wrap("printInteger") { NWScript.printInteger(nInteger) }
  def printObject(oObject: NWObject) = wrap("printObject") { NWScript.printObject(oObject) }
  def printString(sString: String) = wrap("printString") { NWScript.printString(sString) }
  def printVector(vVector: NWVector, bPrepend: Boolean) = wrap("printVector") { NWScript.printVector(vVector, bPrepend) }
  def random(nMaxInteger: Int) = wrap("random") { NWScript.random(nMaxInteger) }
  def randomName(nNameType: Int) = wrap("randomName") { NWScript.randomName(nNameType) }
  def recomputeStaticLighting(oArea: NWObject) = wrap("recomputeStaticLighting") { NWScript.recomputeStaticLighting(oArea) }
  def reflexSave(oCreature: NWObject, nDC: Int, nSaveType: Int, oSaveVersus: NWObject) = wrap("reflexSave") { NWScript.reflexSave(oCreature, nDC, nSaveType, oSaveVersus) }
  def removeEffect(oCreature: NWObject, eEffect: NWEffect) = wrap("removeEffect") { NWScript.removeEffect(oCreature, eEffect) }
  def removeFromParty(oPC: NWObject) = wrap("removeFromParty") { NWScript.removeFromParty(oPC) }
  def removeHenchman(oMaster: NWObject, oHenchman: NWObject) = wrap("removeHenchman") { NWScript.removeHenchman(oMaster, oHenchman) }
  def removeItemProperty(oItem: NWObject, ipProperty: NWItemProperty) = wrap("removeItemProperty") { NWScript.removeItemProperty(oItem, ipProperty) }
  def removeJournalQuestEntry(szPlotID: String, oCreature: NWObject, bAllPartyMembers: Boolean, bAllPlayers: Boolean) = wrap("removeJournalQuestEntry") { NWScript.removeJournalQuestEntry(szPlotID, oCreature, bAllPartyMembers, bAllPlayers) }
  def removeSummonedAssociate(oMaster: NWObject, oAssociate: NWObject) = wrap("removeSummonedAssociate") { NWScript.removeSummonedAssociate(oMaster, oAssociate) }
  def resistSpell(oCaster: NWObject, oTarget: NWObject) = wrap("resistSpell") { NWScript.resistSpell(oCaster, oTarget) }
  def restoreBaseAttackBonus(oCreature: NWObject) = wrap("restoreBaseAttackBonus") { NWScript.restoreBaseAttackBonus(oCreature) }
  def restoreCameraFacing = wrap("restoreCameraFacing") { NWScript.restoreCameraFacing }
  def retrieveCampaignObject(sCampaignName: String, sVarName: String, locLocation: NWLocation, oOwner: NWObject, oPlayer: NWObject) = wrap("retrieveCampaignObject") { NWScript.retrieveCampaignObject(sCampaignName, sVarName, locLocation, oOwner, oPlayer) }
  def roundsToSeconds(nRounds: Int) = wrap("roundsToSeconds") { NWScript.roundsToSeconds(nRounds) }
  def sendMessageToAllDMs(szMessage: String) = wrap("sendMessageToAllDMs") { NWScript.sendMessageToAllDMs(szMessage) }
  def sendMessageToPC(oPlayer: NWObject, szMessage: String) = wrap("sendMessageToPC") { NWScript.sendMessageToPC(oPlayer, szMessage) }
  def sendMessageToPCByStrRef(oPlayer: NWObject, nStrRef: Int) = wrap("sendMessageToPCByStrRef") { NWScript.sendMessageToPCByStrRef(oPlayer, nStrRef) }
  def setAILevel(oTarget: NWObject, nAILevel: Int) = wrap("setAILevel") { NWScript.setAILevel(oTarget, nAILevel) }
  def setActionMode(oCreature: NWObject, nActionMode: Int, bStatus: Boolean) = wrap("setActionMode") { NWScript.setActionMode(oCreature, nActionMode, bStatus) }
  def setAreaTransitionBMP(nPredefinedAreaTransition: Int, sCustomAreaTransitionBMP: String) = wrap("setAreaTransitionBMP") { NWScript.setAreaTransitionBMP(nPredefinedAreaTransition, sCustomAreaTransitionBMP) }
  def setAssociateListenPatterns(oTarget: NWObject) = wrap("setAssociateListenPatterns") { NWScript.setAssociateListenPatterns(oTarget) }
  def setBaseAttackBonus(nBaseAttackBonus: Int, oCreature: NWObject) = wrap("setBaseAttackBonus") { NWScript.setBaseAttackBonus(nBaseAttackBonus, oCreature) }
  def setCalendar(nYear: Int, nMonth: Int, nDay: Int) = wrap("setCalendar") { NWScript.setCalendar(nYear, nMonth, nDay) }
  def setCameraFacing(fDirection: Float, fDistance: Float, fPitch: Float, nTransitionType: Int) = wrap("setCameraFacing") { NWScript.setCameraFacing(fDirection, fDistance, fPitch, nTransitionType) }
  def setCameraHeight(oPlayer: NWObject, fHeight: Float) = wrap("setCameraHeight") { NWScript.setCameraHeight(oPlayer, fHeight) }
  def setCameraMode(oPlayer: NWObject, nCameraMode: Int) = wrap("setCameraMode") { NWScript.setCameraMode(oPlayer, nCameraMode) }
  def setCampaignFloat(sCampaignName: String, sVarName: String, flFloat: Float, oPlayer: NWObject) = wrap("setCampaignFloat") { NWScript.setCampaignFloat(sCampaignName, sVarName, flFloat, oPlayer) }
  def setCampaignInt(sCampaignName: String, sVarName: String, nInt: Int, oPlayer: NWObject) = wrap("setCampaignInt") { NWScript.setCampaignInt(sCampaignName, sVarName, nInt, oPlayer) }
  def setCampaignLocation(sCampaignName: String, sVarName: String, locLocation: NWLocation, oPlayer: NWObject) = wrap("setCampaignLocation") { NWScript.setCampaignLocation(sCampaignName, sVarName, locLocation, oPlayer) }
  def setCampaignString(sCampaignName: String, sVarName: String, sString: String, oPlayer: NWObject) = wrap("setCampaignString") { NWScript.setCampaignString(sCampaignName, sVarName, sString, oPlayer) }
  def setCampaignVector(sCampaignName: String, sVarName: String, vVector: NWVector, oPlayer: NWObject) = wrap("setCampaignVector") { NWScript.setCampaignVector(sCampaignName, sVarName, vVector, oPlayer) }
  def setColor(oObject: NWObject, nColorChannel: Int, nColorValue: Int) = wrap("setColor") { NWScript.setColor(oObject, nColorChannel, nColorValue) }
  def setCommandable(bCommandable: Boolean, oTarget: NWObject) = wrap("setCommandable") { NWScript.setCommandable(bCommandable, oTarget) }
  def setCreatureAppearanceType(oCreature: NWObject, nAppearanceType: Int) = wrap("setCreatureAppearanceType") { NWScript.setCreatureAppearanceType(oCreature, nAppearanceType) }
  def setCreatureBodyPart(nCreaturePart: Int, nModelNumber: Int, oCreature: NWObject) = wrap("setCreatureBodyPart") { NWScript.setCreatureBodyPart(nCreaturePart, nModelNumber, oCreature) }
  def setCreatureTailType(nTailType: Int, oCreature: NWObject) = wrap("setCreatureTailType") { NWScript.setCreatureTailType(nTailType, oCreature) }
  def setCreatureWingType(nWingType: Int, oCreature: NWObject) = wrap("setCreatureWingType") { NWScript.setCreatureWingType(nWingType, oCreature) }
  def setCustomToken(nCustomTokenNumber: Int, sTokenValue: String) = wrap("setCustomToken") { NWScript.setCustomToken(nCustomTokenNumber, sTokenValue) }
  def setCutsceneCameraMoveRate(oCreature: NWObject, fRate: Float) = wrap("setCutsceneCameraMoveRate") { NWScript.setCutsceneCameraMoveRate(oCreature, fRate) }
  def setCutsceneMode(oCreature: NWObject, bInCutscene: Boolean, bLeftClickingEnabled: Boolean) = wrap("setCutsceneMode") { NWScript.setCutsceneMode(oCreature, bInCutscene, bLeftClickingEnabled) }
  def setDeity(oCreature: NWObject, sDeity: String) = wrap("setDeity") { NWScript.setDeity(oCreature, sDeity) }
  def setDescription(oObject: NWObject, sNewDescription: String, bIdentifiedDescription: Boolean) = wrap("setDescription") { NWScript.setDescription(oObject, sNewDescription, bIdentifiedDescription) }
  def setDroppableFlag(oItem: NWObject, bDroppable: Boolean) = wrap("setDroppableFlag") { NWScript.setDroppableFlag(oItem, bDroppable) }
  def setEncounterActive(bNewValue: Boolean, oEncounter: NWObject) = wrap("setEncounterActive") { NWScript.setEncounterActive(bNewValue, oEncounter) }
  def setEncounterDifficulty(nEncounterDifficulty: Int, oEncounter: NWObject) = wrap("setEncounterDifficulty") { NWScript.setEncounterDifficulty(nEncounterDifficulty, oEncounter) }
  def setEncounterSpawnsCurrent(nNewValue: Int, oEncounter: NWObject) = wrap("setEncounterSpawnsCurrent") { NWScript.setEncounterSpawnsCurrent(nNewValue, oEncounter) }
  def setEncounterSpawnsMax(nNewValue: Int, oEncounter: NWObject) = wrap("setEncounterSpawnsMax") { NWScript.setEncounterSpawnsMax(nNewValue, oEncounter) }
  def setFacing(fDirection: Float) = wrap("setFacing") { NWScript.setFacing(fDirection) }
  def setFacingPoint(vTarget: NWVector) = wrap("setFacingPoint") { NWScript.setFacingPoint(vTarget) }
  def setFogAmount(nFogType: Int, nFogAmount: Int, oArea: NWObject) = wrap("setFogAmount") { NWScript.setFogAmount(nFogType, nFogAmount, oArea) }
  def setFogColor(nFogType: Int, nFogColor: Int, oArea: NWObject) = wrap("setFogColor") { NWScript.setFogColor(nFogType, nFogColor, oArea) }
  def setFootstepType(nFootstepType: Int, oCreature: NWObject) = wrap("setFootstepType") { NWScript.setFootstepType(nFootstepType, oCreature) }
  def setFortitudeSavingThrow(oObject: NWObject, nFortitudeSave: Int) = wrap("setFortitudeSavingThrow") { NWScript.setFortitudeSavingThrow(oObject, nFortitudeSave) }
  def setHardness(nHardness: Int, oObject: NWObject) = wrap("setHardness") { NWScript.setHardness(nHardness, oObject) }
  def setIdentified(oItem: NWObject, bIdentified: Boolean) = wrap("setIdentified") { NWScript.setIdentified(oItem, bIdentified) }
  def setImmortal(oCreature: NWObject, bImmortal: Boolean) = wrap("setImmortal") { NWScript.setImmortal(oCreature, bImmortal) }
  def setInfiniteFlag(oItem: NWObject, bInfinite: Boolean) = wrap("setInfiniteFlag") { NWScript.setInfiniteFlag(oItem, bInfinite) }
  def setIsDestroyable(bDestroyable: Boolean, bRaiseable: Boolean, bSelectableWhenDead: Boolean) = wrap("setIsDestroyable") { NWScript.setIsDestroyable(bDestroyable, bRaiseable, bSelectableWhenDead) }
  def setIsTemporaryEnemy(oTarget: NWObject, oSource: NWObject, bDecays: Boolean, fDurationInSeconds: Float) = wrap("setIsTemporaryEnemy") { NWScript.setIsTemporaryEnemy(oTarget, oSource, bDecays, fDurationInSeconds) }
  def setIsTemporaryFriend(oTarget: NWObject, oSource: NWObject, bDecays: Boolean, fDurationInSeconds: Float) = wrap("setIsTemporaryFriend") { NWScript.setIsTemporaryFriend(oTarget, oSource, bDecays, fDurationInSeconds) }
  def setIsTemporaryNeutral(oTarget: NWObject, oSource: NWObject, bDecays: Boolean, fDurationInSeconds: Float) = wrap("setIsTemporaryNeutral") { NWScript.setIsTemporaryNeutral(oTarget, oSource, bDecays, fDurationInSeconds) }
  def setItemCharges(oItem: NWObject, nCharges: Int) = wrap("setItemCharges") { NWScript.setItemCharges(oItem, nCharges) }
  def setItemCursedFlag(oItem: NWObject, bCursed: Boolean) = wrap("setItemCursedFlag") { NWScript.setItemCursedFlag(oItem, bCursed) }
  def setItemStackSize(oItem: NWObject, nSize: Int) = wrap("setItemStackSize") { NWScript.setItemStackSize(oItem, nSize) }
  def setKeyRequiredFeedback(oObject: NWObject, sFeedbackMessage: String) = wrap("setKeyRequiredFeedback") { NWScript.setKeyRequiredFeedback(oObject, sFeedbackMessage) }
  def setListenPattern(oObject: NWObject, sPattern: String, nNumber: Int) = wrap("setListenPattern") { NWScript.setListenPattern(oObject, sPattern, nNumber) }
  def setListening(oObject: NWObject, bValue: Boolean) = wrap("setListening") { NWScript.setListening(oObject, bValue) }
  def setLocalFloat(oObject: NWObject, sVarName: String, fValue: Float) = wrap("setLocalFloat") { NWScript.setLocalFloat(oObject, sVarName, fValue) }
  def setLocalInt(oObject: NWObject, sVarName: String, nValue: Int) = wrap("setLocalInt") { NWScript.setLocalInt(oObject, sVarName, nValue) }
  def setLocalLocation(oObject: NWObject, sVarName: String, lValue: NWLocation) = wrap("setLocalLocation") { NWScript.setLocalLocation(oObject, sVarName, lValue) }
  def setLocalObject(oObject: NWObject, sVarName: String, oValue: NWObject) = wrap("setLocalObject") { NWScript.setLocalObject(oObject, sVarName, oValue) }
  def setLocalString(oObject: NWObject, sVarName: String, sValue: String) = wrap("setLocalString") { NWScript.setLocalString(oObject, sVarName, sValue) }
  def setLockKeyRequired(oObject: NWObject, bKeyRequired: Boolean) = wrap("setLockKeyRequired") { NWScript.setLockKeyRequired(oObject, bKeyRequired) }
  def setLockKeyTag(oObject: NWObject, sNewKeyTag: String) = wrap("setLockKeyTag") { NWScript.setLockKeyTag(oObject, sNewKeyTag) }
  def setLockLockDC(oObject: NWObject, nNewLockDC: Int) = wrap("setLockLockDC") { NWScript.setLockLockDC(oObject, nNewLockDC) }
  def setLockLockable(oObject: NWObject, bLockable: Boolean) = wrap("setLockLockable") { NWScript.setLockLockable(oObject, bLockable) }
  def setLockUnlockDC(oObject: NWObject, nNewUnlockDC: Int) = wrap("setLockUnlockDC") { NWScript.setLockUnlockDC(oObject, nNewUnlockDC) }
  def setLocked(oTarget: NWObject, bLocked: Boolean) = wrap("setLocked") { NWScript.setLocked(oTarget, bLocked) }
  def setLootable(oCreature: NWObject, bLootable: Boolean) = wrap("setLootable") { NWScript.setLootable(oCreature, bLootable) }
  def setMapPinEnabled(oMapPin: NWObject, bEnabled: Boolean) = wrap("setMapPinEnabled") { NWScript.setMapPinEnabled(oMapPin, bEnabled) }
  def setMaxHenchmen(nNumHenchmen: Int) = wrap("setMaxHenchmen") { NWScript.setMaxHenchmen(nNumHenchmen) }
  def setModuleXPScale(nXPScale: Int) = wrap("setModuleXPScale") { NWScript.setModuleXPScale(nXPScale) }
  def setName(oObject: NWObject, sNewName: String) = wrap("setName") { NWScript.setName(oObject, sNewName) }
  def setPCChatMessage(sNewChatMessage: String) = wrap("setPCChatMessage") { NWScript.setPCChatMessage(sNewChatMessage) }
  def setPCChatVolume(nTalkVolume: Int) = wrap("setPCChatVolume") { NWScript.setPCChatVolume(nTalkVolume) }
  def setPCDislike(oPlayer: NWObject, oTarget: NWObject) = wrap("setPCDislike") { NWScript.setPCDislike(oPlayer, oTarget) }
  def setPCLike(oPlayer: NWObject, oTarget: NWObject) = wrap("setPCLike") { NWScript.setPCLike(oPlayer, oTarget) }
  def setPanelButtonFlash(oPlayer: NWObject, nButton: Int, bEnableFlash: Boolean) = wrap("setPanelButtonFlash") { NWScript.setPanelButtonFlash(oPlayer, nButton, bEnableFlash) }
  def setPhenoType(nPhenoType: Int, oCreature: NWObject) = wrap("setPhenoType") { NWScript.setPhenoType(nPhenoType, oCreature) }
  def setPickpocketableFlag(oItem: NWObject, bPickpocketable: Boolean) = wrap("setPickpocketableFlag") { NWScript.setPickpocketableFlag(oItem, bPickpocketable) }
  def setPlaceableIllumination(oPlaceable: NWObject, bIlluminate: Boolean) = wrap("setPlaceableIllumination") { NWScript.setPlaceableIllumination(oPlaceable, bIlluminate) }
  def setPlotFlag(oTarget: NWObject, bPlotFlag: Boolean) = wrap("setPlotFlag") { NWScript.setPlotFlag(oTarget, bPlotFlag) }
  def setPortraitId(oTarget: NWObject, nPortraitId: Int) = wrap("setPortraitId") { NWScript.setPortraitId(oTarget, nPortraitId) }
  def setPortraitResRef(oTarget: NWObject, sPortraitResRef: String) = wrap("setPortraitResRef") { NWScript.setPortraitResRef(oTarget, sPortraitResRef) }
  def setReflexSavingThrow(oObject: NWObject, nReflexSave: Int) = wrap("setReflexSavingThrow") { NWScript.setReflexSavingThrow(oObject, nReflexSave) }
  def setSkyBox(nSkyBox: Int, oArea: NWObject) = wrap("setSkyBox") { NWScript.setSkyBox(nSkyBox, oArea) }
  def setStandardFactionReputation(nStandardFaction: Int, nNewReputation: Int, oCreature: NWObject) = wrap("setStandardFactionReputation") { NWScript.setStandardFactionReputation(nStandardFaction, nNewReputation, oCreature) }
  def setStolenFlag(oItem: NWObject, bStolenFlag: Boolean) = wrap("setStolenFlag") { NWScript.setStolenFlag(oItem, bStolenFlag) }
  def setStoreGold(oidStore: NWObject, nGold: Int) = wrap("setStoreGold") { NWScript.setStoreGold(oidStore, nGold) }
  def setStoreIdentifyCost(oidStore: NWObject, nCost: Int) = wrap("setStoreIdentifyCost") { NWScript.setStoreIdentifyCost(oidStore, nCost) }
  def setStoreMaxBuyPrice(oidStore: NWObject, nMaxBuy: Int) = wrap("setStoreMaxBuyPrice") { NWScript.setStoreMaxBuyPrice(oidStore, nMaxBuy) }
  def setSubRace(oCreature: NWObject, sSubRace: String) = wrap("setSubRace") { NWScript.setSubRace(oCreature, sSubRace) }
  def setTileMainLightColor(lTileLocation: NWLocation, nMainLight1Color: Int, nMainLight2Color: Int) = wrap("setTileMainLightColor") { NWScript.setTileMainLightColor(lTileLocation, nMainLight1Color, nMainLight2Color) }
  def setTileSourceLightColor(lTileLocation: NWLocation, nSourceLight1Color: Int, nSourceLight2Color: Int) = wrap("setTileSourceLightColor") { NWScript.setTileSourceLightColor(lTileLocation, nSourceLight1Color, nSourceLight2Color) }
  def setTime(nHour: Int, nMinute: Int, nSecond: Int, nMillisecond: Int) = wrap("setTime") { NWScript.setTime(nHour, nMinute, nSecond, nMillisecond) }
  def setTrapActive(oTrapObject: NWObject, bActive: Boolean) = wrap("setTrapActive") { NWScript.setTrapActive(oTrapObject, bActive) }
  def setTrapDetectDC(oTrapObject: NWObject, nDetectDC: Int) = wrap("setTrapDetectDC") { NWScript.setTrapDetectDC(oTrapObject, nDetectDC) }
  def setTrapDetectable(oTrapObject: NWObject, bDetectable: Boolean) = wrap("setTrapDetectable") { NWScript.setTrapDetectable(oTrapObject, bDetectable) }
  def setTrapDetectedBy(oTrap: NWObject, oDetector: NWObject, bDetected: Boolean) = wrap("setTrapDetectedBy") { NWScript.setTrapDetectedBy(oTrap, oDetector, bDetected) }
  def setTrapDisabled(oTrap: NWObject) = wrap("setTrapDisabled") { NWScript.setTrapDisabled(oTrap) }
  def setTrapDisarmDC(oTrapObject: NWObject, nDisarmDC: Int) = wrap("setTrapDisarmDC") { NWScript.setTrapDisarmDC(oTrapObject, nDisarmDC) }
  def setTrapDisarmable(oTrapObject: NWObject, bDisarmable: Boolean) = wrap("setTrapDisarmable") { NWScript.setTrapDisarmable(oTrapObject, bDisarmable) }
  def setTrapKeyTag(oTrapObject: NWObject, sKeyTag: String) = wrap("setTrapKeyTag") { NWScript.setTrapKeyTag(oTrapObject, sKeyTag) }
  def setTrapOneShot(oTrapObject: NWObject, bOneShot: Boolean) = wrap("setTrapOneShot") { NWScript.setTrapOneShot(oTrapObject, bOneShot) }
  def setTrapRecoverable(oTrapObject: NWObject, bRecoverable: Boolean) = wrap("setTrapRecoverable") { NWScript.setTrapRecoverable(oTrapObject, bRecoverable) }
  def setUseableFlag(oPlaceable: NWObject, bUseableFlag: Boolean) = wrap("setUseableFlag") { NWScript.setUseableFlag(oPlaceable, bUseableFlag) }
  def setWeather(oTarget: NWObject, nWeather: Int) = wrap("setWeather") { NWScript.setWeather(oTarget, nWeather) }
  def setWillSavingThrow(oObject: NWObject, nWillSave: Int) = wrap("setWillSavingThrow") { NWScript.setWillSavingThrow(oObject, nWillSave) }
  def setXP(oCreature: NWObject, nXpAmount: Int) = wrap("setXP") { NWScript.setXP(oCreature, nXpAmount) }
  def soundObjectPlay(oSound: NWObject) = wrap("soundObjectPlay") { NWScript.soundObjectPlay(oSound) }
  def soundObjectSetPosition(oSound: NWObject, vPosition: NWVector) = wrap("soundObjectSetPosition") { NWScript.soundObjectSetPosition(oSound, vPosition) }
  def soundObjectSetVolume(oSound: NWObject, nVolume: Int) = wrap("soundObjectSetVolume") { NWScript.soundObjectSetVolume(oSound, nVolume) }
  def soundObjectStop(oSound: NWObject) = wrap("soundObjectStop") { NWScript.soundObjectStop(oSound) }
  def spawnScriptDebugger = wrap("spawnScriptDebugger") { NWScript.spawnScriptDebugger }
  def speakOneLinerConversation(sDialogResRef: String, oTokenTarget: NWObject) = wrap("speakOneLinerConversation") { NWScript.speakOneLinerConversation(sDialogResRef, oTokenTarget) }
  def speakString(sStringToSpeak: String, nTalkVolume: Int) = wrap("speakString") { NWScript.speakString(sStringToSpeak, nTalkVolume) }
  def speakStringByStrRef(nStrRef: Int, nTalkVolume: Int) = wrap("speakStringByStrRef") { NWScript.speakStringByStrRef(nStrRef, nTalkVolume) }
  def startNewModule(sModuleName: String) = wrap("startNewModule") { NWScript.startNewModule(sModuleName) }
  def stopFade(oCreature: NWObject) = wrap("stopFade") { NWScript.stopFade(oCreature) }
  def storeCameraFacing = wrap("storeCameraFacing") { NWScript.storeCameraFacing }
  def storeCampaignObject(sCampaignName: String, sVarName: String, oObject: NWObject, oPlayer: NWObject) = wrap("storeCampaignObject") { NWScript.storeCampaignObject(sCampaignName, sVarName, oObject, oPlayer) }
  def stringToFloat(sNumber: String) = wrap("stringToFloat") { NWScript.stringToFloat(sNumber) }
  def stringToInt(sNumber: String) = wrap("stringToInt") { NWScript.stringToInt(sNumber) }
  def summonAnimalCompanion(oMaster: NWObject) = wrap("summonAnimalCompanion") { NWScript.summonAnimalCompanion(oMaster) }
  def summonFamiliar(oMaster: NWObject) = wrap("summonFamiliar") { NWScript.summonFamiliar(oMaster) }
  def supernaturalEffect(eEffect: NWEffect) = wrap("supernaturalEffect") { NWScript.supernaturalEffect(eEffect) }
  def surrenderToEnemies = wrap("surrenderToEnemies") { NWScript.surrenderToEnemies }
  def takeGoldFromCreature(nAmount: Int, oCreatureToTakeFrom: NWObject, bDestroy: Boolean) = wrap("takeGoldFromCreature") { NWScript.takeGoldFromCreature(nAmount, oCreatureToTakeFrom, bDestroy) }
  def testStringAgainstPattern(sPattern: String, sStringToTest: String) = wrap("testStringAgainstPattern") { NWScript.testStringAgainstPattern(sPattern, sStringToTest) }
  def touchAttackMelee(oTarget: NWObject, bDisplayFeedback: Boolean) = wrap("touchAttackMelee") { NWScript.touchAttackMelee(oTarget, bDisplayFeedback) }
  def touchAttackRanged(oTarget: NWObject, bDisplayFeedback: Boolean) = wrap("touchAttackRanged") { NWScript.touchAttackRanged(oTarget, bDisplayFeedback) }
  def turnsToSeconds(nTurns: Int) = wrap("turnsToSeconds") { NWScript.turnsToSeconds(nTurns) }
  def unpossessFamiliar(oCreature: NWObject) = wrap("unpossessFamiliar") { NWScript.unpossessFamiliar(oCreature) }
  def vector(x: Float, y: Float, z: Float) = wrap("vector") { NWScript.vector(x, y, z) }
  def vectorMagnitude(vVector: NWVector) = wrap("vectorMagnitude") { NWScript.vectorMagnitude(vVector) }
  def vectorNormalize(vVector: NWVector) = wrap("vectorNormalize") { NWScript.vectorNormalize(vVector) }
  def vectorToAngle(vVector: NWVector) = wrap("vectorToAngle") { NWScript.vectorToAngle(vVector) }
  def versusAlignmentEffect(eEffect: NWEffect, nLawChaos: Int, nGoodEvil: Int) = wrap("versusAlignmentEffect") { NWScript.versusAlignmentEffect(eEffect, nLawChaos, nGoodEvil) }
  def versusRacialTypeEffect(eEffect: NWEffect, nRacialType: Int) = wrap("versusRacialTypeEffect") { NWScript.versusRacialTypeEffect(eEffect, nRacialType) }
  def versusTrapEffect(eEffect: NWEffect) = wrap("versusTrapEffect") { NWScript.versusTrapEffect(eEffect) }
  def willSave(oCreature: NWObject, nDC: Int, nSaveType: Int, oSaveVersus: NWObject) = wrap("willSave") { NWScript.willSave(oCreature, nDC, nSaveType, oSaveVersus) }
  def writeTimestampedLogEntry(sLogEntry: String) = wrap("writeTimestampedLogEntry") { NWScript.writeTimestampedLogEntry(sLogEntry) }
  def yardsToMeters(fYards: Float) = wrap("yardsToMeters") { NWScript.yardsToMeters(fYards) }
  def getPCs = wrap("getPCs") { NWScript.getPCs }
  def getEffects(oWithEffects: NWObject) = wrap("getEffects") { NWScript.getEffects(oWithEffects) }
  def getItemProperties(oItem: NWObject) = wrap("getItemProperties") { NWScript.getItemProperties(oItem) }
  def getItemsInInventory(oWithInventory: NWObject) = wrap("getItemsInInventory") { NWScript.getItemsInInventory(oWithInventory) }
  def getObjectsInArea(oArea: NWObject) = wrap("getObjectsInArea") { NWScript.getObjectsInArea(oArea) }
  def getObjectsInShape(nShapeType: Int, fSize: Float, lTarget: NWLocation, bLineOfSight: Boolean, nObjectFilter: Int, vOrigin: NWVector) = wrap("getObjectsInShape") { NWScript.getObjectsInShape(nShapeType, fSize, lTarget, bLineOfSight, nObjectFilter, vOrigin) }
  def getFactionMembers(oMemberOf: NWObject, bPCOnly: Boolean) = wrap("getFactionMembers") { NWScript.getFactionMembers(oMemberOf, bPCOnly) }
  def getObjectsInPersistentObject(oPersistentObject: NWObject, nResidentObjectType: Int, nPersistentZone: Int) = wrap("getObjectsInPersistentObject") { NWScript.getObjectsInPersistentObject(oPersistentObject, nResidentObjectType, nPersistentZone) }
}
